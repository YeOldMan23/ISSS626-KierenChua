for (i in seq_along(unique_accidents)) {
# Split by category
#loc_geom <- filtered_thai_bd[filtered_thai_bd$ADM1_EN == unique_locs[i], ]
# Get the road lines of current area
#cur_loc_rl <- st_within(filtered_thai_rl_sf_linestring$centroid, loc_geom, sparse = FALSE, prepared=TRUE)
#cur_loc_rl <- sapply(1:nrow(filtered_thai_rl_sf_linestring), function(i) {
#  any(cur_loc_rl[[i]])
#})
#cur_loc_rl <- filtered_thai_rl_sf_linestring[cur_loc_rl, ]
#cur_loc_rl <- cur_loc_rl %>% select(-centroid)
# Filter the accidents as well
for (j in seq_along(unqiue_tod)) {
#contains_combined <- st_within(filtered_rdacc_sf, loc_geom, sparse = FALSE)
#contains_combined <- sapply(1:nrow(filtered_rdacc_sf), function(i) {
#  any(contains_combined[[i]])
#})
#loc_rdacc_sf <- filtered_rdacc_sf[contains_combined, ]
print(unique_accidents[i])
print(unqiue_tod[j])
loc_rdacc_sf <- filtered_rdacc_sf %>%
filter(accident_type == unique_accidents[i]) %>%
filter(time_of_day == unqiue_tod[j])
lixelized <- lixelize_lines(cur_loc_rl,
1000,
mindist = NULL)
samples <- lines_center(lixelized)
densities <- nkde(filtered_thai_rl_sf_linestring,
events = loc_rdacc_sf,
w = rep(1, nrow(loc_rdacc_sf)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
method = "simple",
digits = 3,
tol = 1,
grid_shape = c(1,1),
max_depth = 5,
agg = 5,
sparse = TRUE,
verbose = TRUE)
samples$density <- densities
lixelized$density <- densities
samples$density <- samples$density*1000
lixelized$density <- lixelized$density*1000
# Append the values to the dataframe
appending_index = (i-1) * length(unqiue_tod) + k
print(appending_index)
accidents_list[appending_index] <- loc_rdacc_sf
lixels_list[appending_index] <- lixelized
}
}
accident_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
lixels_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
# First filter out the spe
for (i in seq_along(unique_accidents)) {
# Split by category
#loc_geom <- filtered_thai_bd[filtered_thai_bd$ADM1_EN == unique_locs[i], ]
# Get the road lines of current area
#cur_loc_rl <- st_within(filtered_thai_rl_sf_linestring$centroid, loc_geom, sparse = FALSE, prepared=TRUE)
#cur_loc_rl <- sapply(1:nrow(filtered_thai_rl_sf_linestring), function(i) {
#  any(cur_loc_rl[[i]])
#})
#cur_loc_rl <- filtered_thai_rl_sf_linestring[cur_loc_rl, ]
#cur_loc_rl <- cur_loc_rl %>% select(-centroid)
# Filter the accidents as well
for (j in seq_along(unqiue_tod)) {
#contains_combined <- st_within(filtered_rdacc_sf, loc_geom, sparse = FALSE)
#contains_combined <- sapply(1:nrow(filtered_rdacc_sf), function(i) {
#  any(contains_combined[[i]])
#})
#loc_rdacc_sf <- filtered_rdacc_sf[contains_combined, ]
print(unique_accidents[i])
print(unqiue_tod[j])
loc_rdacc_sf <- filtered_rdacc_sf %>%
filter(accident_type == unique_accidents[i]) %>%
filter(time_of_day == unqiue_tod[j])
lixelized <- lixelize_lines(cur_loc_rl,
1000,
mindist = NULL)
samples <- lines_center(lixelized)
densities <- nkde(filtered_thai_rl_sf_linestring,
events = loc_rdacc_sf,
w = rep(1, nrow(loc_rdacc_sf)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
method = "simple",
digits = 3,
tol = 1,
grid_shape = c(1,1),
max_depth = 5,
agg = 5,
sparse = TRUE,
verbose = TRUE)
samples$density <- densities
lixelized$density <- densities
samples$density <- samples$density*1000
lixelized$density <- lixelized$density*1000
# Append the values to the dataframe
appending_index <- (i-1) * length(unqiue_tod) + k
print(appending_index)
accidents_list[appending_index] <- loc_rdacc_sf
lixels_list[appending_index] <- lixelized
}
}
accident_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
lixels_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
# First filter out the spe
for (i in seq_along(unique_accidents)) {
# Split by category
#loc_geom <- filtered_thai_bd[filtered_thai_bd$ADM1_EN == unique_locs[i], ]
# Get the road lines of current area
#cur_loc_rl <- st_within(filtered_thai_rl_sf_linestring$centroid, loc_geom, sparse = FALSE, prepared=TRUE)
#cur_loc_rl <- sapply(1:nrow(filtered_thai_rl_sf_linestring), function(i) {
#  any(cur_loc_rl[[i]])
#})
#cur_loc_rl <- filtered_thai_rl_sf_linestring[cur_loc_rl, ]
#cur_loc_rl <- cur_loc_rl %>% select(-centroid)
# Filter the accidents as well
for (j in seq_along(unqiue_tod)) {
#contains_combined <- st_within(filtered_rdacc_sf, loc_geom, sparse = FALSE)
#contains_combined <- sapply(1:nrow(filtered_rdacc_sf), function(i) {
#  any(contains_combined[[i]])
#})
#loc_rdacc_sf <- filtered_rdacc_sf[contains_combined, ]
print(unique_accidents[i])
print(unqiue_tod[j])
loc_rdacc_sf <- filtered_rdacc_sf %>%
filter(accident_type == unique_accidents[i]) %>%
filter(time_of_day == unqiue_tod[j])
lixelized <- lixelize_lines(cur_loc_rl,
1000,
mindist = NULL)
samples <- lines_center(lixelized)
densities <- nkde(filtered_thai_rl_sf_linestring,
events = loc_rdacc_sf,
w = rep(1, nrow(loc_rdacc_sf)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
method = "simple",
digits = 3,
tol = 1,
grid_shape = c(1,1),
max_depth = 5,
agg = 5,
sparse = TRUE,
verbose = TRUE)
samples$density <- densities
lixelized$density <- densities
samples$density <- samples$density*1000
lixelized$density <- lixelized$density*1000
# Append the values to the dataframe
appending_index <- (i-1) * length(unqiue_tod) + j
print(appending_index)
accidents_list[appending_index] <- loc_rdacc_sf
lixels_list[appending_index] <- lixelized
}
}
View(accident_list)
accident_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
lixels_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
# First filter out the spe
for (i in seq_along(unique_accidents)) {
# Split by category
#loc_geom <- filtered_thai_bd[filtered_thai_bd$ADM1_EN == unique_locs[i], ]
# Get the road lines of current area
#cur_loc_rl <- st_within(filtered_thai_rl_sf_linestring$centroid, loc_geom, sparse = FALSE, prepared=TRUE)
#cur_loc_rl <- sapply(1:nrow(filtered_thai_rl_sf_linestring), function(i) {
#  any(cur_loc_rl[[i]])
#})
#cur_loc_rl <- filtered_thai_rl_sf_linestring[cur_loc_rl, ]
#cur_loc_rl <- cur_loc_rl %>% select(-centroid)
# Filter the accidents as well
for (j in seq_along(unqiue_tod)) {
#contains_combined <- st_within(filtered_rdacc_sf, loc_geom, sparse = FALSE)
#contains_combined <- sapply(1:nrow(filtered_rdacc_sf), function(i) {
#  any(contains_combined[[i]])
#})
#loc_rdacc_sf <- filtered_rdacc_sf[contains_combined, ]
print(unique_accidents[i])
print(unqiue_tod[j])
loc_rdacc_sf <- filtered_rdacc_sf %>%
filter(accident_type == unique_accidents[i]) %>%
filter(time_of_day == unqiue_tod[j])
lixelized <- lixelize_lines(cur_loc_rl,
1000,
mindist = NULL)
samples <- lines_center(lixelized)
densities <- nkde(filtered_thai_rl_sf_linestring,
events = loc_rdacc_sf,
w = rep(1, nrow(loc_rdacc_sf)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
method = "simple",
digits = 3,
tol = 1,
grid_shape = c(1,1),
max_depth = 5,
agg = 5,
sparse = TRUE,
verbose = TRUE)
samples$density <- densities
lixelized$density <- densities
samples$density <- samples$density*1000
lixelized$density <- lixelized$density*1000
# Append the values to the dataframe
appending_index <- (i-1) * length(unqiue_tod) + j
print(appending_index)
accidents_list[[appending_index]] <- loc_rdacc_sf
lixels_list[[appending_index]] <- lixelized
}
}
View(accident_list)
View(accidents_list)
View(accident_list)
View(accidents_list)
# | fig-width: 100
# Print out the plots
tmap_mode('view')
tm_shape(lixels_list[[1]])+
tm_lines(col="highway", lwd="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'Month', shape = "time_of_day", palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
tmap_mode('plot')
# | fig-width: 100
# Print out the plots
tm_shape(lixels_list[[1]])+
tm_lines(col="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'Month', shape = "time_of_day", palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
# | fig-width: 100
# Print out the plots
tmap_mode('view')
tm_shape(lixels_list[[1]])+
tm_lines(col="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'Month', shape = "time_of_day", palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
tmap_mode('plot')
accidents_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
lixels_list <- vector("list", length(unique_accidents) * length(unqiue_tod))
# First filter out the spe
for (i in seq_along(unique_accidents)) {
# Split by category
#loc_geom <- filtered_thai_bd[filtered_thai_bd$ADM1_EN == unique_locs[i], ]
# Get the road lines of current area
#cur_loc_rl <- st_within(filtered_thai_rl_sf_linestring$centroid, loc_geom, sparse = FALSE, prepared=TRUE)
#cur_loc_rl <- sapply(1:nrow(filtered_thai_rl_sf_linestring), function(i) {
#  any(cur_loc_rl[[i]])
#})
#cur_loc_rl <- filtered_thai_rl_sf_linestring[cur_loc_rl, ]
#cur_loc_rl <- cur_loc_rl %>% select(-centroid)
# Filter the accidents as well
for (j in seq_along(unqiue_tod)) {
#contains_combined <- st_within(filtered_rdacc_sf, loc_geom, sparse = FALSE)
#contains_combined <- sapply(1:nrow(filtered_rdacc_sf), function(i) {
#  any(contains_combined[[i]])
#})
#loc_rdacc_sf <- filtered_rdacc_sf[contains_combined, ]
print(unique_accidents[i])
print(unqiue_tod[j])
loc_rdacc_sf <- filtered_rdacc_sf %>%
filter(accident_type == unique_accidents[i]) %>%
filter(time_of_day == unqiue_tod[j])
lixelized <- lixelize_lines(filtered_thai_rl_sf_linestring,
1000,
mindist = NULL)
samples <- lines_center(lixelized)
densities <- nkde(filtered_thai_rl_sf_linestring,
events = loc_rdacc_sf,
w = rep(1, nrow(loc_rdacc_sf)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
method = "simple",
digits = 3,
tol = 1,
grid_shape = c(1,1),
max_depth = 5,
agg = 5,
sparse = TRUE,
verbose = TRUE)
samples$density <- densities
lixelized$density <- densities
samples$density <- samples$density*1000
lixelized$density <- lixelized$density*1000
# Append the values to the dataframe
appending_index <- (i-1) * length(unqiue_tod) + j
print(appending_index)
accidents_list[[appending_index]] <- loc_rdacc_sf
lixels_list[[appending_index]] <- lixelized
}
}
# | fig-width: 100
# Print out the plots
tmap_mode('view')
tm_shape(lixels_list[[1]])+
tm_lines(col="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'Month', shape = "time_of_day", palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
tmap_mode('plot')
# | fig-width: 100
# Print out the plots
tm_shape(lixels_list[[1]])+
tm_lines(col="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'time_of_day', palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
# | fig-width: 100
# Print out the plots
tm_shape(lixels_list[[1]])+
tm_lines(col="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'accident_type', palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
View(filtered_rdacc_sf)
# | fig-width: 100
# Print out the plots
tm_shape(lixels_list[[1]])+
tm_lines(col="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'dayofweek_name', palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
# | fig-width: 100
# Print out the plots
tm_shape(lixels_list[[1]])+
tm_lines(col="highway", lwd="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'dayofweek_name', palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
# | fig-width: 100
# Print out the plots
tmap_mode('view')
tm_shape(lixels_list[[1]])+
tm_lines(col="highway", lwd="density", scale=4.0)+
tm_shape(accidents_list[[1]])+
tm_dots(col = 'dayofweek_name', palette='BrBG', style="cont") +
tm_layout(title = "Bangkok")
tmap_mode('plot')
View(filtered_rdacc_sf)
# Make a table for accident types and by district to reduce size of the the network
#unique_locs <- unique(filtered_thai_bd$ADM1_EN)
unique_accidents <- unique(filtered_rdacc_sf$accident_type)
unqiue_tod <- unique(filtered_rdacc_sf$dayofweek_name)
accidents_list <- vector("list", length(unique_locs))
# Make a table for accident types and by district to reduce size of the the network
#unique_locs <- unique(filtered_thai_bd$ADM1_EN)
unique_accidents <- unique(filtered_rdacc_sf$accident_type)
unqiue_tod <- unique(filtered_rdacc_sf$dayofweek_name)
accidents_list <- vector("list", length(unique_locs))
# Make a table for accident types and by district to reduce size of the the network
#unique_locs <- unique(filtered_thai_bd$ADM1_EN)
unique_accidents <- unique(filtered_rdacc_sf$accident_type)
unqiue_dow <- unique(filtered_rdacc_sf$dayofweek_name)
set.seed(1234)
# Sample 1 graph to initialize an suitable starting bw
loc_rdacc_sf <- filtered_rdacc_sf %>%
filter(accident_type == unique_accidents[1]) %>%
filter(time_of_day == unqiue_dow[1])
kfun_rdacc <- kfunctions(filtered_thai_rl_sf_linestring,
loc_rdacc_sf,
start = 0,
end = 1000,
step = 50,
width = 50,
nsim = 50,
resolution = 50,
verbose = TRUE,
agg= 200,
conf_int = 0.05)
set.seed(1234)
# Sample 1 graph to initialize an suitable starting bw
loc_rdacc_sf <- filtered_rdacc_sf %>%
filter(accident_type == unique_accidents[1]) %>%
filter(dayofweek_name == unqiue_dow[1])
kfun_rdacc <- kfunctions(filtered_thai_rl_sf_linestring,
loc_rdacc_sf,
start = 0,
end = 1000,
step = 50,
width = 50,
nsim = 50,
resolution = 50,
verbose = TRUE,
agg= 200,
conf_int = 0.05)
print(unqiue_dow[1])
print(unique_accidents[1])
print(kfun_rdacc$plotk)
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_tod)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[j], unqiue_dow[i]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
unqiue_dow[1]
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
unqiue_dow[0]
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
unqiue_dow[2]
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
# Initialize a dataframe to keep all the values
bw_dataframe <- data.frame(matrix(ncol = length(unqiue_dow), nrow = length(unique_accidents)))
colnames(bw_dataframe) <- unqiue_dow
rownames(bw_dataframe) <- unique_accidents
# Since I cannot append dataframes to dataframes, will need to save indexes
unqiue_dow[3]
count <- 1
for (i in seq_along(unique_accidents)) {
for (j in seq_along(unqiue_dow)) {
bw_dataframe[unique_accidents[i], unqiue_dow[j]] <- count
count <- count + 1
}
}
View(filtered_rdacc_sf)
