group_by(province_eng) %>%
summarise(mk = list(
unclass(
Kendall::MannKendall(gi_star)))) %>%
tidyr::unnest_wider(mk)
head(ehsa_test)
set.seed(1234)
ehsa <- emerging_hotspot_analysis(
x = spacetime_thai,
.var = "total_rev_ratio",
k = 1,
nsim = 99
)
thai_ehsa <- province_shp %>%
left_join(ehsa,
by = join_by(province_eng == location))
ehsa_sig <- thai_ehsa %>%
filter(p_value < 0.05) # Filter p-value
tmap_mode("plot")
tm_shape(thai_ehsa) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
tm_fill("classification") +
tm_borders(alpha = 0.4)
pacman::p_load("sf", "sfdep", "spdep", "knitr", "tidyverse", "tmap", "ggstatsplot", "spatstat", "tmaptools", "lubridate", "Kendall")
# Read the provincial data and the other data
thailand_csv <- read_csv("data/thailand_domestic_tourism_2019_2023_ver2.csv") %>%
mutate(year = year(date)) %>%
mutate(month = month(date)) %>%
select(-province_thai, -region_thai)
# There is some missing data
unqiue_province <- unique(thailand_csv$province_eng)
province_shp <- st_read(dsn = "data", layer = "tha_admbnda_adm1_rtsd_20220121") %>%
st_transform(crs = 32647) %>%
select(-ADM1_REF,
-ADM1ALT1EN,
-ADM1ALT2EN,
-ADM1ALT1TH,
-ADM1ALT2TH,
-ADM0_TH,
-ADM0_EN,
-ADM0_PCODE,
-ADM1_PCODE,
-date,
-ADM1_TH,
-validOn,
-validTo) %>%
rename(province_eng = ADM1_EN) %>% # Rename for spacetime
filter(province_eng %in% unqiue_province) %>% #Remove missing
mutate(centroid = st_centroid(geometry))
# Check for empty geometries
empty_geometries <- st_is_empty(province_shp)
if (any(empty_geometries)) {
warning("Some geometries are empty.")
} else {
print("No Empty Geometries")
}
#| fig-width: 12
tmap_mode("plot")
tm_shape(province_shp) +
tm_polygons() +
tm_text("province_eng", size = 1.0)
tmap_mode("plot")
economic_inidcators <- unique(thailand_csv$variable)
print(economic_inidcators)
thailand_csv_thai_no <- thailand_csv %>% filter(variable == "no_tourist_thai")
thailand_csv_fore_no <- thailand_csv %>% filter(variable == "no_tourist_foreign")
thailand_csv_total_no <- thailand_csv %>% filter(variable == "no_tourist_all")
thailand_csv_thai_rev <- thailand_csv %>% filter(variable == "revenue_thai")
thailand_csv_fore_rev <- thailand_csv %>% filter(variable == "revenue_foreign")
thailand_csv_total_rev <- thailand_csv %>% filter(variable == "revenue_all")
thailand_csv_fore_revratio <- thailand_csv_fore_rev$value / thailand_csv_fore_no$value
thailand_csv_thai_revratio <- thailand_csv_thai_rev$value / thailand_csv_thai_no$value
thailand_csv_total_revratio <- thailand_csv_total_rev$value / thailand_csv_total_no$value
thai_df <- data.frame(
province_eng = thailand_csv_thai_no$province_eng,
month = thailand_csv_thai_no$month,
year = thailand_csv_thai_no$year,
fore_rev_ratio = thailand_csv_fore_revratio,
thai_rev_ratio = thailand_csv_thai_revratio,
total_rev_ratio = thailand_csv_total_revratio
)
thai_df
k1 <- knn2nb(knearneigh(province_shp$centroid))
k1dists <- unlist(nbdists(k1, province_shp$centroid))
summary(k1dists)
adapt_neighbours <- dnearneigh(province_shp$centroid, 0, 124814)
plot(province_shp$geometry, border="lightgrey")
plot(adapt_neighbours, province_shp$centroid, add=TRUE, col="red")
dist <- nbdists(adapt_neighbours, province_shp$centroid / 1000)
ids <- lapply(dist, function(x) 1/(x))
ids
thai_weights <- st_weights(adapt_neighbours)
thai_weights
check_space <- thai_df %>%
filter(year == 2020) %>%
filter(month == 12)
check_geom <- left_join(province_shp,  check_space, by='province_eng')
moranI <- global_moran(check_geom$total_rev_ratio,
adapt_neighbours,
thai_weights)
glimpse(moranI)
global_moran_test(check_geom$total_rev_ratio,
adapt_neighbours,
thai_weights)
set.seed(1234)
global_moran_perm(check_geom$total_rev_ratio,
adapt_neighbours,
thai_weights,
nsim=99) # Number of simulations start from 0
set.seed(1234)
lisa <- check_geom %>%
mutate(local_moran = local_moran(check_geom$total_rev_ratio,
adapt_neighbours,
thai_weights,
nsim=99)) %>%
unnest(local_moran)
l_moran_1 <- tm_shape(lisa) +
tm_fill("ii") +
tm_borders(alpha=0.5) +
tm_view(set.zoom.limits = c(6, 8)) +
tm_layout(main.title = "local Moran's I of Total Revenue Ratio",
main.title.size = 0.65)
l_moran_2 <- tm_shape(lisa) +
tm_fill("p_ii_sim",
breaks = c(0, 0.001, 0.01, 0.05, 1),
labels = c("0.001", "0.01", "0.05", "Not sig")) +
tm_borders(alpha=0.5) +
tm_layout(main.title = "p-value of local Moran's I",
main.title.size = 1)
tmap_arrange(l_moran_1, l_moran_2, ncol=2)
lisa_sig <- lisa  %>%
filter(p_ii_sim < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
tm_fill("mean") +
tm_borders(alpha = 0.4)
set.seed(1234)
HCSA <- check_geom %>%
mutate(local_Gi = local_gstar_perm(
total_rev_ratio, adapt_neighbours, thai_weights, nsim = 99),
.before = 1) %>%
unnest(local_Gi)
tmap_mode("plot")
HCSA_map1 <- tm_shape(HCSA) +
tm_fill("gi_star") +
tm_borders(alpha = 0.5) +
tm_view(set.zoom.limits = c(6,8)) +
tm_layout(main.title = "Gi* of Total Revenue Ratio",
main.title.size = 0.8)
HCSA_map2 <- tm_shape(HCSA) +
tm_fill("p_value",
breaks = c(0, 0.001, 0.01, 0.05, 1),
labels = c("0.001", "0.01", "0.05", "Not sig")) +
tm_borders(alpha = 0.5) +
tm_layout(main.title = "p-value of Gi*",
main.title.size = 0.8)
tmap_arrange(HCSA_map1, HCSA_map2, ncol = 2)
HCSA_sig <- HCSA  %>%
filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
tm_fill("cluster") +
tm_borders(alpha = 0.4)
total_ratio_map <- tm_shape(check_geom) +
tm_polygons("total_rev_ratio") +
tm_layout(title = "Total Revenue Ratio")
thai_ratio_map <- tm_shape(check_geom) +
tm_polygons("thai_rev_ratio") +
tm_layout(title = "Thai Revenue Ratio")
fore_ratio_map <- tm_shape(check_geom) +
tm_polygons("fore_rev_ratio") +
tm_layout(title = "Foreign Revenue Ratio")
tmap_arrange(total_ratio_map, thai_ratio_map, fore_ratio_map, ncol=3)
set.seed(1234)
unique_years <- c(2019, 2022, 2023)
for (i in seq_along(unique_years)) {
# Filter out the year
check_space_year <-thai_df %>%
filter(year == unique_years[i])
unique_months <- unique(check_space_year$month)
for (j in seq_along(unique_months)) {
# Cut out specific data
print_statement <- paste0("Year : ", unique_years[i], " Month : ", unique_months[j])
check_space <- thai_df %>%
filter(year == unique_years[i]) %>%
filter(month == unique_months[j])
if (nrow(check_space) == 0) {
next
}
check_geom <- left_join(province_shp,  check_space, by='province_eng')
cur_test <- global_moran_perm(check_geom$total_rev_ratio,
adapt_neighbours,
thai_weights,
nsim=99) # Number of simulations start from 0
print(print_statement)
print(cur_test)
}
}
thai_df$st_time <- (thai_df$year %% 100) * 100 + thai_df$month
thai_df_nans  <- thai_df%>% select(-fore_rev_ratio) %>% filter(is.nan(total_rev_ratio))
remove_times <- unique(thai_df_nans$st_time)
remove_times
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-fore_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(province_eng %in% unique_prov)
spacetime_thai <- spacetime(thai_df_spacetime_clean, province_shp,
.loc_col = "province_eng",
.time_col= "st_time")
is_spacetime_cube(spacetime_thai)
activate(spacetime_thai, "data")
activate(spacetime_thai, "geometry")
hcsa_neighbours <- lapply(adapt_neighbours, function(x) unlist(x))
thai_nb <- spacetime_thai %>%
activate("geometry") %>%
mutate(nb = hcsa_neighbours,
wt = thai_weights,
.before = 1) %>%
set_nbs("nb") %>%
set_wts("wt")
gi_stars_ehsa <- thai_nb %>%
group_by(st_time) %>%
mutate(gi_star = local_gstar_perm(
total_rev_ratio, adapt_neighbours, wt)) %>%
tidyr::unnest(gi_star)
ehsa_test <- gi_stars_ehsa %>%
group_by(province_eng) %>%
summarise(mk = list(
unclass(
Kendall::MannKendall(gi_star)))) %>%
tidyr::unnest_wider(mk)
head(ehsa_test)
set.seed(1234)
ehsa <- emerging_hotspot_analysis(
x = spacetime_thai,
.var = "total_rev_ratio",
k = 1,
nsim = 99
)
thai_ehsa <- province_shp %>%
left_join(ehsa,
by = join_by(province_eng == location))
ehsa_sig <- thai_ehsa %>%
filter(p_value < 0.05) # Filter p-value
tmap_mode("plot")
tm_shape(thai_ehsa) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
tm_fill("classification") +
tm_borders(alpha = 0.4)
thai_df$st_time <- (thai_df$year %% 100) * 100 + thai_df$month
thai_df_nans  <- thai_df%>% select(-total_rev_ratio, -thai_rev_ratio) %>% filter(is.nan(fore_rev_ratio))
remove_times <- unique(thai_df_nans$st_time)
remove_times
thai_df_nans  <- thai_df%>% select(-total_rev_ratio, -thai_rev_ratio) %>% filter(is.nan(fore_rev_ratio))
remove_times <- unique(thai_df_nans$st_time)
remove_times
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-total_rev_ratio, -thai_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(province_eng %in% unique_prov)
spacetime_thai <- spacetime(thai_df_spacetime_clean, province_shp,
.loc_col = "province_eng",
.time_col= "st_time")
is_spacetime_cube(spacetime_thai)
activate(spacetime_thai, "data")
activate(spacetime_thai, "geometry")
hcsa_neighbours <- lapply(adapt_neighbours, function(x) unlist(x))
thai_nb <- spacetime_thai %>%
activate("geometry") %>%
mutate(nb = hcsa_neighbours,
wt = thai_weights,
.before = 1) %>%
set_nbs("nb") %>%
set_wts("wt")
gi_stars_ehsa <- thai_nb %>%
group_by(st_time) %>%
mutate(gi_star = local_gstar_perm(
total_rev_ratio, adapt_neighbours, wt)) %>%
tidyr::unnest(gi_star)
hcsa_neighbours <- lapply(adapt_neighbours, function(x) unlist(x))
thai_nb <- spacetime_thai %>%
activate("geometry") %>%
mutate(nb = hcsa_neighbours,
wt = thai_weights,
.before = 1) %>%
set_nbs("nb") %>%
set_wts("wt")
gi_stars_ehsa <- thai_nb %>%
group_by(st_time) %>%
mutate(gi_star = local_gstar_perm(
fore_rev_ratio, adapt_neighbours, wt)) %>%
tidyr::unnest(gi_star)
ehsa_test <- gi_stars_ehsa %>%
group_by(province_eng) %>%
summarise(mk = list(
unclass(
Kendall::MannKendall(gi_star)))) %>%
tidyr::unnest_wider(mk)
head(ehsa_test)
set.seed(1234)
ehsa <- emerging_hotspot_analysis(
x = spacetime_thai,
.var = "fore_rev_ratio",
k = 1,
nsim = 99
)
thai_ehsa <- province_shp %>%
left_join(ehsa,
by = join_by(province_eng == location))
ehsa_sig <- thai_ehsa %>%
filter(p_value < 0.05) # Filter p-value
tmap_mode("plot")
tm_shape(thai_ehsa) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
tm_fill("classification") +
tm_borders(alpha = 0.4)
View(thai_df)
thai_df$st_time <- (thai_df$year %% 100) * 100 + thai_df$month
thai_df_nans <- thai_df%>% select(-total_rev_ratio, -thai_rev_ratio) %>% filter(is.nan(fore_rev_ratio))
remove_times <- unique(thai_df_nans$st_time)
remove_times
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-total_rev_ratio, -thai_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(year == 2019)
filter(province_eng %in% unique_prov)
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-total_rev_ratio, -thai_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(year == 2019) %>%
filter(province_eng %in% unique_prov)
spacetime_thai <- spacetime(thai_df_spacetime_clean, province_shp,
.loc_col = "province_eng",
.time_col= "st_time")
is_spacetime_cube(spacetime_thai)
activate(spacetime_thai, "data")
activate(spacetime_thai, "geometry")
hcsa_neighbours <- lapply(adapt_neighbours, function(x) unlist(x))
thai_nb <- spacetime_thai %>%
activate("geometry") %>%
mutate(nb = hcsa_neighbours,
wt = thai_weights,
.before = 1) %>%
set_nbs("nb") %>%
set_wts("wt")
gi_stars_ehsa <- thai_nb %>%
group_by(st_time) %>%
mutate(gi_star = local_gstar_perm(
fore_rev_ratio, adapt_neighbours, wt)) %>%
tidyr::unnest(gi_star)
ehsa_test <- gi_stars_ehsa %>%
group_by(province_eng) %>%
summarise(mk = list(
unclass(
Kendall::MannKendall(gi_star)))) %>%
tidyr::unnest_wider(mk)
head(ehsa_test)
set.seed(1234)
ehsa <- emerging_hotspot_analysis(
x = spacetime_thai,
.var = "fore_rev_ratio",
k = 1,
nsim = 99
)
thai_ehsa <- province_shp %>%
left_join(ehsa,
by = join_by(province_eng == location))
ehsa_sig <- thai_ehsa %>%
filter(p_value < 0.05) # Filter p-value
tmap_mode("plot")
tm_shape(thai_ehsa) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
tm_fill("classification") +
tm_borders(alpha = 0.4)
thai_df_nans  <- thai_df%>% select(-fore_rev_ratio, -total_rev_ratio) %>% filter(is.nan(thai_rev_ratio))
remove_times <- unique(thai_df_nans$st_time)
remove_times
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-fore_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(year == 2019)
filter(province_eng %in% unique_prov)
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-fore_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(year == 2019) %>%
filter(province_eng %in% unique_prov)
spacetime_thai <- spacetime(thai_df_spacetime_clean, province_shp,
.loc_col = "province_eng",
.time_col= "st_time")
is_spacetime_cube(spacetime_thai)
activate(spacetime_thai, "data")
activate(spacetime_thai, "geometry")
hcsa_neighbours <- lapply(adapt_neighbours, function(x) unlist(x))
thai_nb <- spacetime_thai %>%
activate("geometry") %>%
mutate(nb = hcsa_neighbours,
wt = thai_weights,
.before = 1) %>%
set_nbs("nb") %>%
set_wts("wt")
gi_stars_ehsa <- thai_nb %>%
group_by(st_time) %>%
mutate(gi_star = local_gstar_perm(
thai_rev_ratio, adapt_neighbours, wt)) %>%
tidyr::unnest(gi_star)
ehsa_test <- gi_stars_ehsa %>%
group_by(province_eng) %>%
summarise(mk = list(
unclass(
Kendall::MannKendall(gi_star)))) %>%
tidyr::unnest_wider(mk)
head(ehsa_test)
set.seed(1234)
ehsa <- emerging_hotspot_analysis(
x = spacetime_thai,
.var = "total_rev_ratio",
k = 1,
nsim = 99
)
thai_ehsa <- province_shp %>%
left_join(ehsa,
by = join_by(province_eng == location))
ehsa_sig <- thai_ehsa %>%
filter(p_value < 0.05) # Filter p-value
tmap_mode("plot")
tm_shape(thai_ehsa) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
tm_fill("classification") +
tm_borders(alpha = 0.4)
thai_df_nans  <- thai_df%>% select(-thai_rev_ratio, -total_rev_ratio) %>% filter(is.nan(fore_rev_ratio))
remove_times <- unique(thai_df_nans$st_time)
remove_times
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-fore_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(year %in% c(2020, 2021, 2022)) %>%
filter(province_eng %in% unique_prov)
# We also need to remove the locations that are not in province shp that were removed due to missing data
unique_prov <- unique(province_shp$province_eng)
thai_df_spacetime_clean <- thai_df%>% select(-fore_rev_ratio)%>%
filter(!(st_time %in% remove_times)) %>%
filter(year %in% c(2020, 2021, 2022)) %>%
filter(province_eng %in% unique_prov)
spacetime_thai <- spacetime(thai_df_spacetime_clean, province_shp,
.loc_col = "province_eng",
.time_col= "st_time")
is_spacetime_cube(spacetime_thai)
activate(spacetime_thai, "data")
activate(spacetime_thai, "geometry")
hcsa_neighbours <- lapply(adapt_neighbours, function(x) unlist(x))
thai_nb <- spacetime_thai %>%
activate("geometry") %>%
mutate(nb = hcsa_neighbours,
wt = thai_weights,
.before = 1) %>%
set_nbs("nb") %>%
set_wts("wt")
gi_stars_ehsa <- thai_nb %>%
group_by(st_time) %>%
mutate(gi_star = local_gstar_perm(
thai_rev_ratio, adapt_neighbours, wt)) %>%
tidyr::unnest(gi_star)
ehsa_test <- gi_stars_ehsa %>%
group_by(province_eng) %>%
summarise(mk = list(
unclass(
Kendall::MannKendall(gi_star)))) %>%
tidyr::unnest_wider(mk)
head(ehsa_test)
set.seed(1234)
ehsa <- emerging_hotspot_analysis(
x = spacetime_thai,
.var = "total_rev_ratio",
k = 1,
nsim = 99
)
thai_ehsa <- province_shp %>%
left_join(ehsa,
by = join_by(province_eng == location))
ehsa_sig <- thai_ehsa %>%
filter(p_value < 0.05) # Filter p-value
tmap_mode("plot")
tm_shape(thai_ehsa) +
tm_polygons() +
tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
tm_fill("classification") +
tm_borders(alpha = 0.4)
