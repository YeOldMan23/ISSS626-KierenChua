---
title: "In Class Exercise 1"
author: "Kieren Chua"
date: "August 26 2024"
date-modified: "last-modified"
execute: 
    eval: true # evaulate the code first
    echo: true # See the code output
    message: false # don't see the warnings
    freeze: true # Prevent re-render
---

<!-- Remember to copy pase this on every page -->

```{r}
pacman::p_load("sf", "tidyverse", "tmap", "ggstatsplot")
```

```{r}
# Load in the new data  (both versions)
shp_data <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
# Load in the subzone data for 2019
mpsz19_kml <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
# Note that KML very untidy, Shape data is usually better
View(mpsz19_kml)

# View the class data
class(shp_data)
View(shp_data) # Hidden since message: false
st_crs(shp_data)
```

```{r}
# Count the number of points in pre-school
# Download the Preschool Data
preschool_geojson <- st_read("data/PreSchoolsLocation.geojson")
```

### Transformation

Transforms coordinate systems from 1 projection to another, useful for different countries / systems.

```{r}
# Make sure tha shp_data and preschool geojson are the same st_crs
# Nest several arguments with %>% transfer the output of one file to the next function
mpsz19_shp <- st_read(dsn = "data/", layer = "MPSZ-2019") %>% st_transform(crs=3414) # Similar to Ubuntu > to copy the output of error files to text files for logging
preschool_geojson <- preschool_geojson %>% st_transform(crs=3414)
```

## Basic Spatial Models

1.  Vector - Points / Lines / Polygons

-   Points (x, y) POINT
-   Line String ((x1, y1), (x2, y2) ...) LINESTRING
-   Polygon ((x1, y1, x2, y2 ... x1, y1)) POLYGON<!--  Always ends on the first point --> \# ! Also has mutiple version

```{r}
# Export back to KML, because  the OG KML file is corrupted 
st_write(shp_data, "data/MP14_SUBZONE_WEB_PL.kml", delete_dsn = TRUE) # Delete existing files, similar to shutil
```

## Coordinate Systems and Map Projects

This Coordinate systems are important since they tell us how the data is represented and more importantly, their units. Commonly represented projection systems can be found [here](https://epsg.io/). *Note : Singapore uses SVY21*

## Combining / Amending Columns

```{r}
# Intersecting of data
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = lengths(
    st_intersects(mpsz19_shp, preschool_geojson)))

structure(mpsz19_shp)

# Computing density
mpsz19_shp <- mpsz19_shp %>%
  mutate(Area = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )

# Adding new columns to plot
mpsz19_shp $`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))
mpsz19_shp $`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) 
mpsz19_shp_df <- as.data.frame(mpsz19_shp)

ggscatterstats(data = mpsz19_shp_df,
               x = `PreSch Density`,
               y = `PreSch Count`,
               type = "parametric")
```

### Working with population Data

```{r}
popdata <- read_csv("data/respopagesextod2023.csv")

st_crs(popdata)

# Show columns
popdata2023 <- popdata %>% 
  group_by(PA, SZ, AG) %>% 
  summarise(`POP`=sum(`Pop`)) %>%  
  ungroup() %>% 
  pivot_wider(names_from=AG,
              values_from = POP)

colnames(popdata2023)

# Show pop data
popdata2023 <- popdata2023 %>%
  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24
         +rowSums(.[14])) %>% # Aged 5 - 9
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59
  rowSums(.[15])) %>%  # Aged 60 -64
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)
  / `ECONOMY ACTIVE`) %>% 
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`,
         `TOTAL`, `DEPENDENCY`)

# Mutate to 
popdata2023 <- popdata2023 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) 
mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,
                          by = c("SUBZONE_N" = "SZ"))
pop2023_mpsz <- left_join(popdata2023, mpsz19_shp, 
                          by = c("SZ" = "SUBZONE_N"))
class(mpsz_pop2023)
colnames(mpsz19_shp)
```

```{r}
tmap_mode("plot")

# Make the chloropeth map
tm_shape(mpsz_pop2023)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```


```{r}
# Drop NA
mpsz_pop2023 <- mpsz_pop2023 %>% drop_na()

# Function
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}

# Highlight only relevant areas
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(mpsz_pop2023) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}

percentmap("DEPENDENCY", mpsz_pop2023)
```
### BoxMap

```{r}
ggplot(data = mpsz_pop2023,
       aes(x = "",
           y = DEPENDENCY)) +
  geom_boxplot()

boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}

get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}

boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
boxmap("DEPENDENCY", mpsz_pop2023)
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
boxmap("DEPENDENCY", mpsz_pop2023)
```

### Location of Statistics Information

Popular data sites, can extract data here - [data.gov](https://data.gov.sg/) - [SingStat](https://www.singstat.gov.sg/)
