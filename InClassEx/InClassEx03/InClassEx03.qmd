---
title: "In Class Exercise 3 - 
Network Constrained Spatial Point Patterns Analysis"
author: "Kieren Chua"
date: "September 16 2024"
date-modified: "last-modified"
execute: 
    eval: true # evaulate the code first
    echo: true # See the code output
    message: false # don't see the warnings
    freeze: true # Prevent re-render
---

# Part 1 : Load the data and packages

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse)
```

```{r}
network <- st_read(dsn="data/raw_data", 
                   layer="Punggol_St")
```

```{r}
childcare <- st_read(dsn="data/raw_data",
                     layer="Punggol_CC")
```

# Part 2 : Initial Plots

```{r}
plot(st_geometry(network))
plot(childcare,add=T,col='red',pch = 19)
```

```{r}
tmap_mode('view')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
tmap_mode('plot')
```

# Part 3: Network KDE (NKDE) Analysis

```{r}
lixels <- lixelize_lines(network, 
                         700, 
                         mindist = 375)
samples <- lines_center(lixels) 
```

```{r}
childcare <- st_zm(childcare)
```
```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1, nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
```
Note: There is another function called lixelize_lines.mc() which provide multicore support.

Add to values and change to pixels

```{r}
samples$density <- densities
lixels$density <- densities
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

Plot graph

```{r]
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
tmap_mode('plot')}
```

Network Constrained G- and K-Function Analysis

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

```{r}
kfun_childcare$plotk
```
