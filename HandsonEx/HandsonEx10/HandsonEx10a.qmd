---
title: "Hands on Exercise 10a - Processing and Visualizing Flow Data"
author: "Kieren Chua"
date: "3rd November 2024"
date-modified: "last-modified"
execute: 
    eval: true # evaulate the code first
    echo: true # See the code output
    message: false # don't see the warnings
    freeze: true # Prevent re-render
html-table-processing: none
---

# Part 1 : Reading Packages and Data

```{r}
pacman::p_load(tmap, sf, DT, stplanr, tidyverse)
```

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202210.csv")
```

```{r}
glimpse(odbus)
```


```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

# Part 2 : Extracting the study data

Get Morning Commute Flows between 6am and 9am

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```


```{r}
datatable(odbus6_9)
```

We can keep the data for future use 

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

Re-read the data

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

# Part 3: Working with Geospatial Data 

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```
Verify that the crs of mpsz is 3414

```{r}
mpsz
```

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")
```

# Part 4 : Geospatial data wrangling

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
datatable(busstop_mpsz)
```

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```

We do left join to match each time to a bus stop

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```
We then check for duplicating records

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

There are indeed some duplicated records, we will need to get rid of them

```{r}
od_data <- unique(od_data)
```


```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```


```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```
Now save and re-read the data

```{r}
write_rds(od_data, "data/rds/od_data_fii.rds")
od_data_fii <- read_rds("data/rds/od_data.rds")
```

# Part 5 : Visualizing Spatial Interaction

Remove intrazonal flows

```{r}
od_data_fij <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
write_rds(od_data_fij, "data/rds/od_data_fij.rds")
od_data_fij <- read_rds("data/rds/od_data_fij.rds")
```

## Creating Desire Lines

```{r}
flowLine <- od2line(flow = od_data_fij, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
write_rds(flowLine, "data/rds/flowLine.rds")
flowLine <- read_rds("data/rds/flowLine.rds")
```
## Visualizing Desire Lines

```{r}
tmap_mode("plot")
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```


Too many flows, so we should focus on the more important ones, > 5000.

```{r}
tmap_mode("plot")
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```



