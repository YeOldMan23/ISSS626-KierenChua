{
  "hash": "aaa31902f305a1be4d8e765fb228c342",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 4 - Geographically Weighted Summary Statistics - gwModel Methods\"\nauthor: \"Kieren Chua\"\ndate: \"September 16 2024\"\ndate-modified: \"last-modified\"\nexecute: \n    eval: true # evaulate the code first\n    echo: true # See the code output\n    message: false # don't see the warnings\n    freeze: true # Prevent re-render\n---\n\n\n\n\n# Part 1 : Import files and Read from the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\"sf\", \"tidyverse\", \"tmap\", \"ggstatsplot\", \"GWmodel\", \"knitr\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the dataset and combine the data\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/home/kieren/SMU_MITB/ISSS626/ISSS626-KierenChua/InClassEx/InClassEx02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nNeed to identify by common field name, in this case is County, will need to find common identifier\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left join, will be automatic since\nhunan_sf <- left_join(hunan_sf,hunan2012)%>%\n  select(1:3, 7, 15, 16, 31, 32)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n\n```{.r .cell-code}\nhunan_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3    County GDPPC      GIO      Agri Service\n1   Changde 21098   Anxiang   Anxiang 23667   5108.9  4524.410 14100.0\n2   Changde 21100   Hanshou   Hanshou 20981  13491.0  6545.350 17727.0\n3   Changde 21101    Jinshi    Jinshi 34592  10935.0  2562.460  7525.0\n4   Changde 21102        Li        Li 24473  18402.0  7562.340 53160.0\n5   Changde 21103     Linli     Linli 25554   8214.0  3583.910  7031.0\n6   Changde 21104    Shimen    Shimen 27137  17795.0  5266.510  6981.0\n7  Changsha 21109   Liuyang   Liuyang 63118  99254.0 10844.470 26617.8\n8  Changsha 21110 Ningxiang Ningxiang 62202 114145.0 12804.480 18447.7\n9  Changsha 21111 Wangcheng Wangcheng 70666 148976.0  5222.356  6648.6\n10 Chenzhou 21112     Anren     Anren 12761   4189.2  2357.764  3814.1\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to Spatial Object\nhunan_sp <- hunan_sf %>% as_Spatial()\nhunan_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 88 \nextent      : 108.7831, 114.2544, 24.6342, 30.12812  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 8\nnames       :  NAME_2,  ID_3, NAME_3, County, GDPPC,    GIO,     Agri, Service \nmin values  : Changde, 21098,  Anhua,  Anhua,  8497, 513.95,   527.23,     5.2 \nmax values  : Zhuzhou, 21201, Zixing, Zixing, 88656, 148976, 18328.46,   53160 \n```\n\n\n:::\n:::\n\n\n\n\n# Part 2 : Find the adaptive bandwidth\n\n## Adaptive Kernel\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate based on linear regression\n# Independent variable GDPPC (set to 1 using ~) MUST SET\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\", # Cross validation\n                adaptive = TRUE, # Use adaptive bandwith\n                kernel = \"bisquare\",\n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE, # Set false for fixed bandwidth\n                kernel = \"bisquare\", \n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_CV # Number of neighbours\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n\n\n## Fixed Kernel\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\", # Cross validation\n                adaptive = FALSE, # Use adaptive bandwith\n                kernel = \"bisquare\",\n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_AIC_fixed <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE, # Set false for fixed bandwidth\n                kernel = \"bisquare\", \n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n\n\n\n# Part 3 : Geographically Weighted Summary Statistics with adaptive Bandwidith\n\n## Plot as Map\n\n**Note** : Must make sure that kernel, adaptive and longlat attributes for gwss function must be the same as the one set in bw.gwr to maintain consistency\n\n### Global Correlation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Special object -> list object containing metadata\ngwstat <- gwss(data = hunan_sp,\n                vars = \"GDPPC\",\n                bw = bw_AIC,\n                kernel = \"bisquare\",\n                adaptive = TRUE,\n                longlat = TRUE)\n```\n:::\n\n\n\n\n*Explanation* : \n\n- LM -> Local Mean, (Mean of Kernel)\n- LSD -> Local Standard Deviation, (Std_dev of Kernel)\n- LVar -> Local Variance (Var of Kernel)\n- LSKe -> \n- LCV -> Local Correlation Variance \n\nPlot the map, need to access list and find common identifier\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\nhunan_gstat <- cbind(hunan_sf, gwstat_df) \n# cbind just append the columns blindly\n# MUST NOT SORT OR ARRANGE as cbind assumes no change of sequence \n```\n:::\n\n\n\n\nActual Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n    tm_fill(\"GDPPC_LM\",\n            n=5,\n            style=\"quantile\") +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"Distribution of Geographically Weighted Mean\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n    legend.text.size = 0.6,\n    legend.height = 1.5,\n    legend.width = 1.5,\n    frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](InClassEx02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Change heights, my computer sucks\n```\n:::\n\n\n\n\n### Local Correlation\n\nCheck whether GDP is correlated with their neighbours geographically, see if their closest neighbours' GDP affect that region's GDP. Then compare against global correlation coefficent\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_corr <- bw.gwr(GDPPC ~ GIO,\n                data = hunan_sp,\n                approach = \"CV\", # Cross validation\n                adaptive = TRUE, # Use adaptive bandwith\n                kernel = \"bisquare\",\n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 8560450280 \nAdaptive bandwidth: 46 CV score: 8513251654 \nAdaptive bandwidth: 36 CV score: 8369342841 \nAdaptive bandwidth: 29 CV score: 8291740991 \nAdaptive bandwidth: 26 CV score: 8225550299 \nAdaptive bandwidth: 22 CV score: 8200034780 \nAdaptive bandwidth: 22 CV score: 8200034780 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Plot as Graph\nMore effective for showing example\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "InClassEx02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}