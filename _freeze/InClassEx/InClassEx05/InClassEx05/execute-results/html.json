{
  "hash": "b48cede7c61bb6aef5c8e81ee458eeda",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 5 - Global and Local Measures of Spatial Autocorrelation : sfdep methods\"\nauthor: \"Kieren Chua\"\ndate: \"September 23 2024\"\ndate-modified: \"last-modified\"\nexecute: \n    eval: true # evaulate the code first\n    echo: true # See the code output\n    message: false # don't see the warnings\n    freeze: true # Prevent re-render\n---\n\n\n\n# Part 1 : Read Package by File\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/home/kieren/SMU_MITB/ISSS626/ISSS626-KierenChua/InClassEx/InClassEx05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# left join the data\nhunan_GDPPC <- left_join(hunan, hunan2012) %>%\n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n:::\n\n\n\n# Part 2 : Plotting a choropeth map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## Deriving Queen's contiguity weights: sfdep methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- hunan_GDPPC %>% mutate(nb = st_contiguity(geometry),\nwt = st_weights(nb, style = 'W'), # Standardised over neighbours\n.before = 1)\n\n# allow_zero : If true, assigned zero as lagged value to zone without neighbours\n```\n:::\n\n\n\n# Part 3 : Moran's I Test\n\n## Moran's I Test - Single Run\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI <- global_moran(wm_q$GDPPC,\n                        wm_q$nb,\n                        wm_q$wt)\nglimpse(moranI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$GDPPC,\n                        wm_q$nb,\n                        wm_q$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n\n\n:::\n:::\n\n\n\nIf p-value of Moran's I smaller than set p-value, reject null hypothesis of CSR, infer that GDPPC is weakly clustered\n\n## Performing Global Moran's I Permutation Test\n\nNeed to make this reproducable, so we set a seed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\nWe need the conduct the test mutliple times\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$GDPPC,\n                        wm_q$nb,\n                        wm_q$wt,\n                        nsim=99) # Number of simulations start from 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n\nWe can see that the p-value is even smaller.\n\n## Computing local Moran's I\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q %>% \n            mutate(local_moran = local_moran(GDPPC, nb, wt, nsim=99), \n                        .before=1) %>% \n            unnest(local_moran) # Will combine back to OG file\n```\n:::\n\n\n\nUse mean for LISA Cluster Map if neighbours has normal distribution.\nIf right/left skewed, use median for LISA Cluster Map\n\n## Individual Plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) +\n    tm_fill(\"p_ii_sim\") +\n    tm_borders(alpha=0.5) + \n    tm_layout(main.title = \"p-value of local Moran's I\",\n    main.title.size = 2) \n```\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) +\n    tm_fill(\"ii\") +\n    tm_borders(alpha=0.5) + \n    tm_view(set.zoom.limits = c(6, 8)) +\n    tm_layout(main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 2) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Visualizing Local Moran's I side by Side\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nmap1 <-tm_shape(lisa) +\n        tm_fill(\"ii\") +\n        tm_borders(alpha=0.5) + \n        tm_view(set.zoom.limits = c(6, 8)) +\n        tm_layout(main.title = \"local Moran's I of GDPPC\",\n        main.title.size = 2)\n\nmap2 <- tm_shape(lisa) +\n        tm_fill(\"p_ii\",\n                breaks=c(0, 0.001, 0.01, 0.05, 1),\n                labels=c(\"0\", \"0.001\", \"0.01\", \"0.05\", \"1\")) +\n        tm_borders(alpha=0.5) +\n        tm_layout(main.title = \"p-value of local Moran's I\",\n        main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: number of legend labels should be 4\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## LISA Map\n\nWe can plot the High-High, High Low, Low-Low and Low-High regions to show whether there is autocorrelation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We filter out p_ii values < 0.05 for statistical significance\nlisa_sig <- lisa %>% \n            filter(p_ii < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) + \n    tm_polygons() +\n    tm_borders(alpha=0.5) +\ntm_shape(lisa_sig) +\n    tm_fill(\"mean\") +\n    tm_borders(alpha=0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n# Part 4 : Local Gi* Statistics\n\n## Calculating Local Gi* Statistics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- hunan_GDPPC %>% \n        mutate(nb = st_contiguity(geometry),\n        wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1), # Standardised over neighbours\n        .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n\n\n:::\n:::\n\n\n\nCompute Local Gi* Statistics using code below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA <- wm_idw %>% \n        mutate(local_Gi = local_gstar_perm(GDPPC, nb, wts, nsim=99), .before = 1) %>%\n        unnest(local_Gi)\nHCSA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     <dbl> <fct>    <dbl>      <dbl>   <dbl>   <dbl> <dbl>        <dbl>    <dbl>\n 1  0.0416 Low     0.0114 0.00000641  0.0493 9.61e-1  0.7          0.35    0.875\n 2 -0.333  Low     0.0106 0.00000384 -0.0941 9.25e-1  1            0.5     0.661\n 3  0.281  High    0.0126 0.00000751 -0.151  8.80e-1  0.9          0.45    0.640\n 4  0.411  High    0.0118 0.00000922  0.264  7.92e-1  0.6          0.3     0.853\n 5  0.387  High    0.0115 0.00000956  0.339  7.34e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0118 0.00000591 -0.583  5.60e-1  0.72         0.36    0.594\n 7  3.56   High    0.0151 0.00000731  2.61   9.01e-3  0.06         0.03    1.09 \n 8  2.52   High    0.0136 0.00000614  1.49   1.35e-1  0.2          0.1     1.12 \n 9  4.56   High    0.0144 0.00000584  3.53   4.17e-4  0.04         0.02    1.23 \n10  1.16   Low     0.0104 0.00000370  1.82   6.86e-2  0.12         0.06    0.416\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis <dbl>, nb <nb>, wts <list>, NAME_2 <chr>,\n#   ID_3 <int>, NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [°]>\n```\n\n\n:::\n:::\n\n\n\n## Visualizing Gi*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(HCSA) +\n    tm_fill(\"gi_star\") +\n    tm_borders(alpha =0.5) +\n    tm_view(set.zoom.limits =  c(6, 8))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(HCSA) +\n    tm_fill(\"p_sim\") +\n    tm_borders(alpha =0.4)\n```\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig <- HCSA %>% \n            filter(p_sim < 0.05)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(HCSA) +\n    tm_polygons() +\n    tm_borders(alpha =0.5) +\ntm_shape(HCSA_sig) +\n    tm_fill(\"cluster\") +\n    tm_borders(alpha=0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](InClassEx05_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "InClassEx05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}