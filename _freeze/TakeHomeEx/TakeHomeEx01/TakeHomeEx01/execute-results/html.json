{
  "hash": "0e4cf669fb3eeb5b448893638298611a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 1\"\nauthor: \"Kieren Chua\"\ndate: \"August 26 2024\"\ndate-modified: \"September 22 2024\"\nexecute: \n    eval: true # evaulate the code first\n    echo: true # See the code output\n    message: false # don't see the warnings\n    freeze: true # Prevent re-render\n---\n\n\n# Take Home Exercise 1\n\n## Part 1 : Reading the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\"sf\", \"tidyverse\", \"tmap\", \"ggstatsplot\", \"spatstat\", \"spNetwork\", \"tmaptools\")\n```\n:::\n\n\nImport the road accident data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"data/thai_road_accident_2019_2022.csv\") %>% # Read the data\n    mutate(Month = month(incident_datetime, label=TRUE)) %>% # Get month, set the date as factor by number\n    mutate(dayofweek = day(incident_datetime)) %>% # Day of the week \n    mutate(Month_fac = month(incident_datetime, label = FALSE)) %>% # Sort by Factor setting label = FALSE\n    filter(!is.na(longitude) & longitude != \"\", !is.na(latitude) & latitude != \"\") %>% # Filter for N.A. and empty values\n    st_as_sf(coords = c(\"longitude\", \"latitude\"), crs=4326) %>% # Convert to SF format\n    st_transform(crs = 32647) # Convert to the correct format\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Use 32647 Format because the metro area is here\n```\n:::\n\n\nView the data, check for data loss **NO MORE THAN 25%**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change to dataframe, check col names \nrdacc_df <- as.data.frame(rdacc_sf)\ncolnames(rdacc_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"acc_code\"                    \"incident_datetime\"          \n [3] \"report_datetime\"             \"province_th\"                \n [5] \"province_en\"                 \"agency\"                     \n [7] \"route\"                       \"vehicle_type\"               \n [9] \"presumed_cause\"              \"accident_type\"              \n[11] \"number_of_vehicles_involved\" \"number_of_fatalities\"       \n[13] \"number_of_injuries\"          \"weather_condition\"          \n[15] \"road_description\"            \"slope_description\"          \n[17] \"Month\"                       \"dayofweek\"                  \n[19] \"Month_fac\"                   \"geometry\"                   \n```\n\n\n:::\n\n```{.r .cell-code}\nrdacc_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 81376 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16183190 ymin: -936.228 xmax: 1200243 ymax: 4918525\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 81,376 × 20\n   acc_code incident_datetime   report_datetime     province_th province_en     \n *    <dbl> <dttm>              <dttm>              <chr>       <chr>           \n 1   571905 2019-01-01 00:00:00 2019-01-02 06:11:00 ลพบุรี        Loburi          \n 2  3790870 2019-01-01 00:03:00 2020-02-20 13:48:00 อุบลราชธานี   Ubon Ratchathani\n 3   599075 2019-01-01 00:05:00 2019-01-01 10:35:00 ประจวบคีรีขันธ์ Prachuap Khiri …\n 4   571924 2019-01-01 00:20:00 2019-01-02 05:12:00 เชียงใหม่     Chiang Mai      \n 5   599523 2019-01-01 00:25:00 2019-01-04 09:42:00 นครสวรรค์    Nakhon Sawan    \n 6   571982 2019-01-01 00:30:00 2019-01-07 12:46:00 แม่ฮ่องสอน    Mae Hong Son    \n 7   612782 2019-01-01 00:30:00 2019-10-25 14:25:00 ชุมพร        Chumphon        \n 8   599235 2019-01-01 00:35:00 2019-01-02 16:23:00 สิงห์บุรี       Sing Buri       \n 9   600643 2019-01-01 00:40:00 2019-01-11 10:01:00 สงขลา       Songkhla        \n10   599105 2019-01-01 00:45:00 2019-01-01 10:11:00 ตราด        Trat            \n# ℹ 81,366 more rows\n# ℹ 15 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month <ord>, dayofweek <int>, Month_fac <dbl>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect data\n\n# Get descriptions on types of data types\nprint('presumed_cause')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"presumed_cause\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(rdacc_df$presumed_cause)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"driving under the influence of alcohol\"         \n [2] \"speeding\"                                       \n [3] \"cutting in closely by people/vehicles/animals\"  \n [4] \"failure to yield right of way\"                  \n [5] \"failure to yield/signal\"                        \n [6] \"falling asleep\"                                 \n [7] \"running red lights/traffic signals\"             \n [8] \"other\"                                          \n [9] \"unfamiliarity with the route/unskilled driving\" \n[10] \"vehicle equipment failure\"                      \n[11] \"illegal overtaking\"                             \n[12] \"tailgating\"                                     \n[13] \"ignoring stop sign while leaving intersection\"  \n[14] \"overloaded vehicle\"                             \n[15] \"insufficient light\"                             \n[16] \"disabled vehicle without proper signals\"        \n[17] \"abrupt lane change\"                             \n[18] \"debris/obstruction on the road\"                 \n[19] \"reversing vehicle\"                              \n[20] \"brake/anti-lock brake system failure\"           \n[21] \"medical condition\"                              \n[22] \"vehicle electrical system failure\"              \n[23] \"driving in the wrong lane\"                      \n[24] \"straddling lanes\"                               \n[25] \"dangerous curve\"                                \n[26] \"failure to signal enter/exit parking\"           \n[27] \"slippery road\"                                  \n[28] \"no traffic signs\"                               \n[29] \"sudden stop\"                                    \n[30] \"using mobile phone while driving\"               \n[31] \"driving without headlights/illumination\"        \n[32] \"worn-out/tire blowout\"                          \n[33] \"obstruction in sight\"                           \n[34] \"traffic light system failure\"                   \n[35] \"disabled vehicle without proper signals/signs\"  \n[36] \"narrow road\"                                    \n[37] \"turn signal system failure\"                     \n[38] \"navigation equipment failure\"                   \n[39] \"inadequate visibility\"                          \n[40] \"road in poor condition\"                         \n[41] \"ป้ายจราจรชำรุด\"                                   \n[42] \"เส้นแบ่งทิศทางจราจรชำรุด\"                           \n[43] \"repair/construction on the road\"                \n[44] \"no presumed cause related to driver\"            \n[45] \"external disturbance\"                           \n[46] \"no presumed cause related to vehicle conditions\"\n[47] \"no presumed cause related to road conditions\"   \n[48] \"no road divider lines\"                          \n[49] \"loss of control\"                                \n[50] \"using psychoactive substances\"                  \n[51] \"no traffic light system\"                        \n[52] \"aggressive driving/overtaking\"                  \n[53] \"internal disturbance\"                           \n[54] \"มึนเมาจากแอลกอฮอล์\"                               \n```\n\n\n:::\n\n```{.r .cell-code}\nprint('number_of_fatalities')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"number_of_fatalities\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(rdacc_df$number_of_fatalities)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  1  3  2  5  6  9  4 10  7 11 13  8\n```\n\n\n:::\n\n```{.r .cell-code}\nprint('weather_condition')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"weather_condition\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(rdacc_df$road_description)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"straight road\"                       \n [2] \"wide curve\"                          \n [3] \"other\"                               \n [4] \"connecting to public/commercial area\"\n [5] \"sharp curve\"                         \n [6] \"four-way intersection\"               \n [7] \"connecting to private area\"          \n [8] \"t-intersection\"                      \n [9] \"y-intersection\"                      \n[10] \"grade-separated intersection/ramps\"  \n[11] \"merge lane\"                          \n[12] \"connecting to school area\"           \n[13] \"lane-changing area\"                  \n[14] \"u-turn area\"                         \n[15] \"roundabout\"                          \n[16] \"motorcycle lane\"                     \n[17] \"pedestrian path\"                     \n[18] \"bridge (across river/canal)\"         \n[19] \"zebra crossing/pedestrian crossing\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint('weather_condition')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"weather_condition\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(rdacc_df$weather_condition)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"clear\"            \"foggy\"            \"dark\"             \"rainy\"           \n[5] \"other\"            \"natural disaster\" \"land slide\"      \n```\n\n\n:::\n\n```{.r .cell-code}\nprint('vehicle_type')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"vehicle_type\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(rdacc_df$vehicle_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"motorcycle\"                   \"private/passenger car\"       \n [3] \"4-wheel pickup truck\"         \"other\"                       \n [5] \"motorized tricycle\"           \"large truck with trailer\"    \n [7] \"van\"                          \"6-wheel truck\"               \n [9] \"7-10-wheel truck\"             \"bicycle\"                     \n[11] \"passenger pickup truck\"       \"pedestrian\"                  \n[13] \"large passenger vehicle\"      \"tractor/agricultural vehicle\"\n[15] \"three-wheeled vehicle\"       \n```\n\n\n:::\n:::\n\n\nMay need to bin certain data into smaller bits so as to draw conclusions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_df <- as.data.frame(rdacc_sf)\ncolnames(rdacc_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"acc_code\"                    \"incident_datetime\"          \n [3] \"report_datetime\"             \"province_th\"                \n [5] \"province_en\"                 \"agency\"                     \n [7] \"route\"                       \"vehicle_type\"               \n [9] \"presumed_cause\"              \"accident_type\"              \n[11] \"number_of_vehicles_involved\" \"number_of_fatalities\"       \n[13] \"number_of_injuries\"          \"weather_condition\"          \n[15] \"road_description\"            \"slope_description\"          \n[17] \"Month\"                       \"dayofweek\"                  \n[19] \"Month_fac\"                   \"geometry\"                   \n```\n\n\n:::\n:::\n\n\nRead the road data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_rl_sf <- st_read(dsn = \"data\", layer = \"hotosm_tha_roads_lines_shp\") %>%\n              st_set_crs(4326) %>%\n              st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\Users\\Admin\\Desktop\\SMU\\ISSS626\\ISSS626-KierenChua\\TakeHomeEx\\TakeHomeEx01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n\n```{.r .cell-code}\nthai_rl_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 325313.7 ymin: 624248.4 xmax: 1215576 ymax: 2263968\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n             name               name_en        highway  surface smoothness\n1      ถนนฉลองกรุง    Chalong Krung Road      secondary    paved       <NA>\n2  ซอยฉลองกรุง 1/1 Soi Chalong Krung 1/1    residential     <NA>       <NA>\n3            <NA>                  <NA> secondary_link     <NA>       <NA>\n4            <NA>                  <NA>        service     <NA>       <NA>\n5      ถนนฉลองกรุง    Chalong Krung Road      secondary concrete       <NA>\n6            <NA>                  <NA>        service     <NA>       <NA>\n7     ถนนเอราวัณ 1         Erawan 1 Road       tertiary     <NA>       <NA>\n8            <NA>                  <NA>           path  unpaved       <NA>\n9            <NA>                  <NA>        service     <NA>       <NA>\n10           <NA>                  <NA>    residential     <NA>       <NA>\n   width lanes oneway bridge layer source        name_th     osm_id  osm_type\n1   <NA>  <NA>    yes   <NA>  <NA>   <NA>     ถนนฉลองกรุง 1125681229 ways_line\n2   <NA>  <NA>   <NA>   <NA>  <NA>   <NA> ซอยฉลองกรุง 1/1  594401607 ways_line\n3   <NA>  <NA>    yes   <NA>  <NA>   <NA>           <NA>  472283206 ways_line\n4   <NA>  <NA>   <NA>   <NA>  <NA>   <NA>           <NA>  594401608 ways_line\n5   <NA>     2    yes    yes     1   Bing     ถนนฉลองกรุง  116847248 ways_line\n6   <NA>  <NA>   <NA>   <NA>  <NA>   <NA>           <NA>  317485095 ways_line\n7   <NA>  <NA>   <NA>   <NA>  <NA>   <NA>    ถนนเอราวัณ 1  378672881 ways_line\n8   <NA>  <NA>   <NA>   <NA>  <NA>    GPS           <NA> 1238351123 ways_line\n9   <NA>  <NA>   <NA>   <NA>  <NA>   <NA>           <NA>  909942692 ways_line\n10  <NA>  <NA>   <NA>   <NA>  <NA>   <NA>           <NA>  694824299 ways_line\n                         geometry\n1  MULTILINESTRING ((693686.1 ...\n2  MULTILINESTRING ((693358 15...\n3  MULTILINESTRING ((692949.1 ...\n4  MULTILINESTRING ((693256 15...\n5  MULTILINESTRING ((692810.8 ...\n6  MULTILINESTRING ((693877.2 ...\n7  MULTILINESTRING ((677182.3 ...\n8  MULTILINESTRING ((486572.6 ...\n9  MULTILINESTRING ((629009.2 ...\n10 MULTILINESTRING ((629703.9 ...\n```\n\n\n:::\n:::\n\n\nWe are only interested in the Thai Metro Area, so need to read the boundaries from the boundary data and filter there\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read from the province layer, note that the Thai Metro area contains only\n    # Bangkok\n    # Nonthaburi\n    # Nakhon Pathom\n    # Pathum Thani\n    # Samut Prakan\n    # Samut Sakhon\nthai_boundaries <- st_read(dsn = \"data\", layer = \"tha_admbnda_adm1_rtsd_20220121\") %>% st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\Admin\\Desktop\\SMU\\ISSS626\\ISSS626-KierenChua\\TakeHomeEx\\TakeHomeEx01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n## Part 2 : Split by location\n\nSince the regions only contains the said regions, we can split it down to the regions for better data processing speed. Said locations are\n\n1)  Bangkok\n2)  Nonthaburi\n3)  Nakhon Pathom\n4)  Pathum Thani\n5)  Samut Prakan\n6)  Samut Sakhon\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the thai boundaries by said locations\nselected_location_list <- c('Bangkok', 'Nonthaburi', 'Nakhon Pathom', 'Pathum Thani', 'Samut Prakan', 'Samut Sakhon')\nselected_thai_boundaries <- thai_boundaries[thai_boundaries$ADM1_EN %in% selected_location_list,]\nplot(selected_thai_boundaries)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 16 attributes; use max.plot = 16 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nMake sure that the other locations are also confined to the selected locations\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_geometry <- st_union(selected_thai_boundaries)\nprint(combined_geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 587893.5 ymin: 1484414 xmax: 712440.5 ymax: 1579076\nProjected CRS: WGS 84 / UTM zone 47N\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((706774.2 1542625, 706774.2 1542619, 7...\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(combined_geometry)\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter by this combined geometry\ncontains_combined <- st_within(rdacc_sf, combined_geometry, sparse = FALSE)\ncontains_combined <- sapply(1:nrow(rdacc_sf), function(i) {\n  any(contains_combined[[i]])\n})\nfiltered_rdacc_sf <- rdacc_sf[contains_combined, ]\nplot(filtered_rdacc_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 19 attributes; use max.plot = 19 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe can see that there is a cluster in the reporting datetime and the incident datetime. But since the report and incident datetime is so similar there could be a relation. There seems to be also a cluster in presumed cause in roughly the same area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now filter the roadlines as well\n# Cut down thai_rl_sf to be smaller for easier processing remove unecesarry columns\n# Smoothness infer from surface, source, width, oneway,layer\n\ncut_rl_sf <- thai_rl_sf %>% select(-surface, -source, \n                                   -name, -name_en, -name_th,\n                                   -width, -oneway, -layer,\n                                   -osm_id, -osm_type)\n\n# Drop Rows with special names that do not concern us,\n# Only include Roads and link roads\ncut_rl_sf <- cut_rl_sf %>% filter(highway %in% c(\"motorway\", \"trunk\", \"primary\", \"secondary\", \"tertiary\", \"unclassified\", \"residential\", \"service\", \"motorway_link\", \"trunk_link\", \"primary_link\", \"secondary_link\", \"motorway_junction\"))\n\n# Make new geometry, centerpoint of road so that comparison for st_within is easier later\n# Dont have to compare all points in mutli-line, just see the center\ncut_rl_sf$centroid <- st_centroid(cut_rl_sf$geometry)\n\nplot(st_geometry(cut_rl_sf$centroid))\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for geometry\ncontains_rl <- st_within(cut_rl_sf$centroid, combined_geometry, sparse = FALSE, prepared=TRUE)\ncontains_rl <- sapply(1:nrow(cut_rl_sf), function(i) {\n  any(contains_rl[[i]])\n})\nfiltered_thai_rl_sf <- cut_rl_sf[contains_rl, ]\n```\n:::\n\n\n## Part 3 : Saving the Smaller Files\n\nThe roadlines data is ver big, so saving to a smaller size file as a .rds file is advised\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(filtered_thai_rl_sf, file='data/clean_data/filtered_thai_rl_sf.rds')\nwrite_rds(filtered_rdacc_sf, file='data/clean_data/filtered_rdacc_sf.rds')\nwrite_rds(selected_thai_boundaries, file='data/clean_data/selected_thai_boundaries.rds')\n```\n:::\n\n\n## Part 4 : Read the new file\n\nNow we can try to read the files again so that we can access the new data This also gives us an estimate of how long it will take to process the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_thai_rl_sf <- readRDS('data/clean_data/filtered_thai_rl_sf.rds')\nfiltered_rdacc_sf <- readRDS('data/clean_data/filtered_rdacc_sf.rds')\nfiltered_thai_bd <- readRDS('data/clean_data/selected_thai_boundaries.rds')\n```\n:::\n\n\n## Part 4 : Plot all graphs together for visual prelimnary analysis'\n\nUse tmaps, but split by area\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(filtered_thai_rl_sf) +\n  tm_lines(col = \"highway\") +\n  tm_shape(filtered_rdacc_sf) +\n  tm_dots(col = \"presumed_cause\", shape = \"accident_type\") +\n  tm_layout(title = \"Visual Preliminary Analysis\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Number of levels of the variable \"presumed_cause\" is 40, which is\nlarger than max.categories (which is 30), so levels are combined. Set\ntmap_options(max.categories = 40) in the layer function to show all levels.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Number of levels (unique values) is 11, which is larger than number of\nsymbol shapes (5).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.34, 0.33. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nAccidents seems to happen mostly on highways, with a few residential scattered, possible to remove some types of highways such as service.\n\nSeems from the main view that accidents happend among main roads / highways. Can try lixelize to find column\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\n```\n:::\n\n\n## Part 5 : 1st and 2nd Order Analysis of Road Accidents\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Confine geometry to OWIN \nfiltered_thai_bd_owin <- as.owin(filtered_thai_bd)\n\nplot(filtered_thai_bd)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 16 attributes; use max.plot = 16 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Turn points into PPP\nfiltered_rdacc_ppp <- as.ppp(filtered_rdacc_sf$geometry)\nfiltered_rdacc_ppp <- filtered_rdacc_ppp[filtered_thai_bd_owin]\nfiltered_rdacc_ppp.km <- rescale.ppp(filtered_rdacc_ppp, 1000, \"km\")\n\nplot(filtered_rdacc_ppp)\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n:::\n\n\n### Check 1st Order and View\n\nWe can try to do first order spatial analysis to see if there are any clusters\n\n#### Initial Overall View\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\n# Use 1km as fixed bandwith\nfiltered_rdacc_bw <- density(filtered_rdacc_ppp.km,\n                              sigma=1.0,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\nplot(filtered_rdacc_bw)\nplot(filtered_thai_bd$geometry)\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-18-1.png){width=1152}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\n```\n:::\n\n\nSeems like accidents are clustered to within certain stretches of highway and also near intersections.\n\nWe can also try to filter by day to determine if the working days affect\n\n#### Split by District\n\nFilter by district 1) Bangkok 2) Nonthaburi 3) Nakhon Pathom 4) Pathum Thani 5) Samut Prakan 6) Samut Sakhon\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbk <- filtered_rdacc_sf %>%\n  filter(province_en == \"Bangkok\")\nnon <- filtered_rdacc_sf %>%\n  filter(province_en == \"Nonthaburi\")\nnp <- filtered_rdacc_sf %>%\n  filter(province_en == \"Nakhon Pathom\")\npt <- filtered_rdacc_sf %>%\n  filter(province_en == \"Pathum Thani\")\nsp <- filtered_rdacc_sf %>%\n  filter(province_en == \"Samut Prakan\")\nss <- filtered_rdacc_sf %>%\n  filter(province_en == \"Samut Sakhon\")\n\n# Filter by Location\nbk_owin <- filtered_thai_bd %>% filter(ADM1_EN==\"Bangkok\") %>% as.owin()\nnon_owin <- filtered_thai_bd %>% filter(ADM1_EN==\"Nonthaburi\") %>% as.owin()\nnp_owin <- filtered_thai_bd %>% filter(ADM1_EN==\"Nakhon Pathom\") %>% as.owin()\npt_owin <- filtered_thai_bd %>% filter(ADM1_EN==\"Pathum Thani\") %>% as.owin()\nsp_owin <- filtered_thai_bd %>% filter(ADM1_EN==\"Samut Prakan\") %>% as.owin()\nss_owin <- filtered_thai_bd %>% filter(ADM1_EN==\"Samut Sakhon\") %>% as.owin()\n\n# Plot the graphs\nfiltered_rdacc_ppp_bk <- filtered_rdacc_ppp[bk_owin]\nfiltered_rdacc_ppp_non <- filtered_rdacc_ppp[non_owin]\nfiltered_rdacc_ppp_np <- filtered_rdacc_ppp[np_owin]\nfiltered_rdacc_ppp_pt <- filtered_rdacc_ppp[pt_owin]\nfiltered_rdacc_ppp_sp <- filtered_rdacc_ppp[sp_owin]\nfiltered_rdacc_ppp_ss <- filtered_rdacc_ppp[ss_owin]\n\nfiltered_rdacc_ppp_bk.km <- rescale.ppp(filtered_rdacc_ppp_bk, 1000, \"km\")\nfiltered_rdacc_ppp_non.km <- rescale.ppp(filtered_rdacc_ppp_non, 1000, \"km\")\nfiltered_rdacc_ppp_np.km <- rescale.ppp(filtered_rdacc_ppp_np, 1000, \"km\")\nfiltered_rdacc_ppp_pt.km <- rescale.ppp(filtered_rdacc_ppp_pt, 1000, \"km\")\nfiltered_rdacc_ppp_sp.km <- rescale.ppp(filtered_rdacc_ppp_sp, 1000, \"km\")\nfiltered_rdacc_ppp_ss.km <- rescale.ppp(filtered_rdacc_ppp_ss, 1000, \"km\")\n\npar(mfrow=c(3,2))\nplot(filtered_rdacc_ppp_bk.km, main=\"Bangkok\")\nplot(filtered_rdacc_ppp_non.km , main=\"Nonthaburi\")\nplot(filtered_rdacc_ppp_np.km, main=\"Nakhon Pathom\")\nplot(filtered_rdacc_ppp_pt.km , main=\"Pathum Thani\")\nplot(filtered_rdacc_ppp_sp.km, main=\"Samut Prakan\")\nplot(filtered_rdacc_ppp_ss.km, main=\"Samut Sakhon\")\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-19-1.png){width=1152}\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1, 1))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(3,2))\nplot(density(filtered_rdacc_ppp_bk.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Bangkok\")\nplot(density(filtered_rdacc_ppp_non.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nonthaburi\")\nplot(density(filtered_rdacc_ppp_np.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nakhon Pathom\")\nplot(density(filtered_rdacc_ppp_pt.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Pathum Thani\")\nplot(density(filtered_rdacc_ppp_sp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Prakan\")\nplot(density(filtered_rdacc_ppp_ss.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Sakhon\")\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-20-1.png){width=1152}\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1, 1))\n```\n:::\n\n\n## Part 6 : Check Network constrained by Time\n\nNow that we can see that there are clusters, we can put it in numbers by doing lixelizing to gain new insight by time instead of road conditions as specified in the task.\n\n### Convert to LineString\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cast the multi-line to linestring\n# filtered_thai_rl_sf$line_string <- st_cast(filtered_thai_rl_sf$geometry, \"LINESTRING\")\nfiltered_thai_rl_sf_linestring <- st_cast(filtered_thai_rl_sf, \"LINESTRING\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in st_cast.sf(filtered_thai_rl_sf, \"LINESTRING\"): repeating attributes\nfor all sub-geometries for which they may not be constant\n```\n\n\n:::\n:::\n\n\n### Additional Filtering\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop the unecessary roads\nfiltered_thai_rl_sf_linestring <- filtered_thai_rl_sf_linestring %>% filter(highway != 'service') %>%      filter(highway != 'unclassified') %>% filter(highway != 'residential') \nfiltered_thai_rl_sf_linestring\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 25124 features and 4 fields\nActive geometry column: geometry\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 589656.1 ymin: 1486975 xmax: 711950.2 ymax: 1584791\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n          highway smoothness lanes bridge                 centroid\n1       secondary       <NA>  <NA>   <NA> POINT (693431.4 1519383)\n2  secondary_link       <NA>  <NA>   <NA> POINT (693051.7 1518971)\n3       secondary       <NA>     2    yes POINT (692955.8 1518812)\n4        tertiary       <NA>  <NA>   <NA> POINT (677238.5 1560536)\n5       secondary       <NA>     3   <NA> POINT (676974.2 1542847)\n6       secondary       <NA>     3   <NA> POINT (676974.6 1542834)\n7       secondary       <NA>     3   <NA> POINT (676399.8 1542915)\n8       secondary       <NA>     3   <NA> POINT (676310.5 1542908)\n9           trunk       <NA>     3   <NA> POINT (633428.1 1523774)\n10       tertiary       <NA>  <NA>   <NA>   POINT (668233 1522120)\n                         geometry\n1  LINESTRING (693686.1 151979...\n2  LINESTRING (692949.1 151886...\n3  LINESTRING (692810.8 151863...\n4  LINESTRING (677182.3 156542...\n5  LINESTRING (676813.7 154284...\n6  LINESTRING (677134.2 154283...\n7  LINESTRING (675989.4 154300...\n8  LINESTRING (676815 1542831,...\n9  LINESTRING (632625.1 152356...\n10 LINESTRING (668360.2 152245...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Drop uncessary non-discernable types or those caused by natural disasters\nfiltered_rdacc_sf <- filtered_rdacc_sf %>% filter(weather_condition != \"landslide\") %>% filter(accident_type != \"other\") %>% filter(vehicle_type != \"other\")\n```\n:::\n\n\n### Time and size based additions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(filtered_rdacc_sf$vehicle_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"motorcycle\"                   \"private/passenger car\"       \n [3] \"4-wheel pickup truck\"         \"van\"                         \n [5] \"large truck with trailer\"     \"large passenger vehicle\"     \n [7] \"6-wheel truck\"                \"7-10-wheel truck\"            \n [9] \"passenger pickup truck\"       \"motorized tricycle\"          \n[11] \"pedestrian\"                   \"bicycle\"                     \n[13] \"tractor/agricultural vehicle\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add new column that describes the day of the week (Monday, Tuesday..)\nfiltered_rdacc_sf$dayofweek_name <- wday(filtered_rdacc_sf$incident_datetime, label=TRUE, abbr=FALSE)\n\n# Add new column that describes time of day, split into morning(700am - 12pm), afternoon (12pm - 5pm), evening (5pm - 10pm), night (10pm - 5am)\nclassify_time_period <- function(dt) {\n  hour <- hour(dt)\n  \n  if (hour >= 7 && hour < 12) {\n    return(\"Morning\")\n  } else if (hour >= 12 && hour < 17) {\n    return(\"Afternoon\")\n  } else if (hour >= 17 && hour < 22) {\n    return(\"Evening\")\n  } else {\n    return(\"Night\")\n  }\n}\n\n# I am seperating the vehicle based on size of blind spot\nclassify_vehicle <- function(dt) {\n  small_vehicle <- c(\"motorcycle\", \"bicycle\", \"motorized tricycle\")\n  medium_vehicle <- c(\"passenger pickup truck\", \"private/passenger car\", \"large passenger vehicle\", \"4-wheel pickup truck\")\n  \n  if (dt %in% small_vehicle) {\n    return(\"Small\")\n  } else if (dt %in% medium_vehicle) {\n    return(\"Medium\")\n  } else {\n    return(\"Large\")\n  }\n}\n\nfiltered_rdacc_sf <- filtered_rdacc_sf %>% mutate(\"time_of_day\" = sapply(filtered_rdacc_sf$incident_datetime, classify_time_period))\n\n# Classify vehicles into small, medium and large vehicles based on function above\nfiltered_rdacc_sf <- filtered_rdacc_sf %>% mutate(\"vehicle_class\" = sapply(filtered_rdacc_sf$vehicle_type, classify_vehicle))\n```\n:::\n\n\n### Histogram Analysis\n\nWe can get a rough overview on the accidents by having a count\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | fig-width: 100\nggplot(filtered_rdacc_sf, aes(x = time_of_day)) +\n  geom_bar(fill = \"steelblue\") +\n  labs(title = \"Histogram of accident by Time of Day\", x = \"Time of Day\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(filtered_rdacc_sf, aes(x = dayofweek_name)) +\n  geom_bar(fill = \"steelblue\") +\n  labs(title = \"Histogram of accident by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(filtered_rdacc_sf, aes(x = vehicle_class)) +\n  geom_bar(fill = \"steelblue\") +\n  labs(title = \"Histogram of accident by vehicle_class\", x = \"vehicle_class\", y = \"Count\") +\n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-25-3.png){width=672}\n:::\n:::\n\n\n### Finding bandwidths using K-Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a table for accident types and by district to reduce size of the the network\n#unique_locs <- unique(filtered_thai_bd$ADM1_EN)\nunique_tod <- unique(filtered_rdacc_sf$time_of_day)\nunique_dow <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n# Sample 1 graph to initialize an suitable starting bw\n  \nloc_rdacc_sf <- filtered_rdacc_sf %>% \n  filter(time_of_day == unique_tod[1]) %>%\n  filter(dayofweek_name == unique_dow[1])\n\n\nkfun_rdacc <- kfunctions(filtered_thai_rl_sf_linestring, \n                           loc_rdacc_sf,\n                           start = 0, \n                           end = 1000, \n                           step = 50, \n                           width = 50, \n                           nsim = 50, \n                           resolution = 50,\n                           verbose = TRUE, \n                            agg= 200,\n                           conf_int = 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Preparing data ...\"\n[1] \"Snapping points on lines ...\"\n[1] \"Building graph ...\"\n[1] \"Calculating k and g functions ...\"\n[1] \"Calculating the simulations ...\"\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================| 100%\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(kfun_rdacc$plotk)\n```\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialize a dataframe to keep all the indexes\nbw_dataframe <- data.frame(matrix(ncol = length(unique_tod), nrow = length(unique_dow)))\ncolnames(bw_dataframe) <- unique_tod\nrownames(bw_dataframe) <- unique_dow\n\n# Since I cannot append dataframes to dataframes, will need to save indexes\ncount <- 1\nfor (i in seq_along(unique_dow)) {\n  for (j in seq_along(unique_tod)) {\n    bw_dataframe[unique_dow[i], unique_tod[j]] <- count\n    count <- count + 1\n  }\n}\n\nbw_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Night Morning Afternoon Evening\nMonday        1       2         3       4\nTuesday       5       6         7       8\nWednesday     9      10        11      12\nThursday     13      14        15      16\nFriday       17      18        19      20\nSaturday     21      22        23      24\nSunday       25      26        27      28\n```\n\n\n:::\n:::\n\n\n### Lixelize based on bandwidths\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_list <- vector(\"list\", length(unique_dow) * length(unique_tod)) # 2 cols\nlixels_list <- vector(\"list\", length(unique_dow) * length(unique_tod))\n\nappending_index <- 1\n# Filter for acciednt types\nfor (i in seq_along(unique_dow)) {\n  # Filter the day\n  for (j in seq_along(unique_tod)) {\n    loc_rdacc_sf <- filtered_rdacc_sf %>% \n      filter(time_of_day == unique_tod[j]) %>%\n      filter(dayofweek_name == unique_dow[i])\n    \n    # Skip if no draw\n    if (nrow(loc_rdacc_sf) <= 0) {\n      next\n    }\n    \n    lixelized <- lixelize_lines.mc(filtered_thai_rl_sf_linestring, \n                               1000, \n                               mindist = NULL)\n    \n    samples <- lines_center(lixelized)\n    densities <- nkde(filtered_thai_rl_sf_linestring, \n                      events = loc_rdacc_sf,\n                      w = rep(1, nrow(loc_rdacc_sf)),\n                      samples = samples,\n                      kernel_name = \"quartic\",\n                      bw = 300, \n                      div= \"bw\", \n                      method = \"simple\",\n                      digits = 3, \n                      tol = 1,\n                      grid_shape = c(1,1), \n                      max_depth = 5,\n                      agg = 5, \n                      sparse = TRUE,\n                      verbose = FALSE)\n    \n    samples$density <- densities\n    lixelized$density <- densities\n    samples$density <- samples$density*1000\n    lixelized$density <- lixelized$density*1000\n    \n    # Append the values to the dataframe\n    print(appending_index)\n    accidents_list[[appending_index]] <- loc_rdacc_sf\n    lixels_list[[appending_index]] <- lixelized\n    appending_index <- appending_index + 1\n    \n    \n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21\n[1] 22\n[1] 23\n[1] 24\n[1] 25\n[1] 26\n[1] 27\n[1] 28\n```\n\n\n:::\n:::\n\n\n### Plot Graphs By Name\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | fig-width: 12\n# | fig-height: 20\n# Print out the plots\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nmap_list <- list()\n\nfor (i in seq_along(unique_dow)) {\n  for (j in seq_along(unique_tod)) {\n    # Get the index\n    cur_index <- bw_dataframe[unique_dow[i], unique_tod[j]]\n    print(cur_index)\n    set_title <- paste0(unique_dow[i], \" on \", unique_tod[j])\n\n    \n    map <- tm_shape(lixels_list[[cur_index]])+\n        tm_lines(col=\"highway\", lwd=\"density\", scale=6.0) +\n      tm_shape(accidents_list[[cur_index]])+\n        tm_dots(col=\"vehicle_class\") +\n        tm_layout(title = set_title)\n    print(map)\n    map_list[[cur_index]] <- map\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-6.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. Therefore, legend.text.size has been set to 0.62. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-7.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-8.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-9.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-10.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-11.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-12.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-13.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-14.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-15.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-16.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-17.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-18.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-19.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-20.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-21.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-22.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-23.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. Therefore, legend.text.size has been set to 0.62. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-24.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-25.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-26.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-27.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](TakeHomeEx01_files/figure-html/unnamed-chunk-30-28.png){width=672}\n:::\n:::\n\n\n## Part 7 : Final Analysis\n\nBased on the histogram, we can see that more accidents happen during the night where it is possible. More accidents also happen during Friday and Saturday, Possibly due to it being the nights where people drive late and do not have to go to work tomorrow.\n\nMost accidents are happening on motorways, according to the graphs. This is also backed up by the kernel analysis in part 4 where the regions of high density also correlate with the high network kernel density here. Most accidents happen at Kanchanaphisek Rd, roads connecting to Bang Khae Interchange, basically either motorways with long routes leading into Bangkok or Motorways with alot of exits to change into other highways.\n\n## Part 8 : Observations\n\nIt noted that more accidents happen with large vehicles in the afternoon and nights,while more accidents happen with medium sized vehicles during the morning and evening. This could correspond with rush hours where more people are going to or getting off from work during the morning and evening, where the number of personal vehicles on the road increases, therefore leading to more accidents during those periods\n\nAnother observation is that the majority of accidents are happening on motorways that are within the city area which are not linked via their train system. (I relied on Google Maps for this, I did not have time to find the appropriate data). If you do a side by side comparison, you can see that across all days and time periods excluding night, accidents do not occur commonly inside the populated zones and only happen on motorways that do not have any nearby adjacent train system. This result may be due to people taking the rail system more, therefore leading to less accidents. This hypothesis is further supported by observing the night time graphs, where accidents clusters begin to appear in the heavily populated regions when the train system is down for the night.\n",
    "supporting": [
      "TakeHomeEx01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}