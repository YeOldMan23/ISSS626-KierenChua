---
title: "Take Home Exercise 1"
author: "Kieren Chua"
date: "August 26 2024"
date-modified: "last-modified"
execute: 
    eval: true # evaulate the code first
    echo: true # See the code output
    message: false # don't see the warnings
    freeze: true # Prevent re-render
---

# Take Home Exercise 1

## Part 1 : Reading the Data

```{r}
pacman::p_load("sf", "tidyverse", "tmap", "ggstatsplot")
```

Import the road accident data

```{r}
rdacc_sf <- read_csv("data/thai_road_accident_2019_2022.csv") %>% # Read the data
    mutate(Month = month(incident_datetime, label=TRUE)) %>% # Get month, set the date as factor by number
    mutate(dayofweek = day(incident_datetime)) %>% # Day of the week 
    mutate(Month_fac = month(incident_datetime, label = FALSE)) %>% # Sort by Factor setting label = FALSE
    filter(!is.na(longitude) & longitude != "", !is.na(latitude) & latitude != "") %>% # Filter for N.A. and empty values
    st_as_sf(coords = c("longitude", "latitude"), crs=4326) %>% # Convert to SF format
    st_transform(crs = 32647) # Convert to the correct format
# Use 32647 Format because the metro area is here
```

View the data, check for data loss **NO MORE THAN 25%**

```{r}
# Change to dataframe, check col names 
rdacc_df <- as.data.frame(rdacc_sf)
colnames(rdacc_df)
rdacc_sf
```

```{r}
# Inspect data

# Get descriptions on types of data types
print('presumed_cause')
unique(rdacc_df$presumed_cause)

print('number_of_fatalities')
unique(rdacc_df$number_of_fatalities)

print('weather_condition')
unique(rdacc_df$road_description)

print('weather_condition')
unique(rdacc_df$weather_condition)

print('vehicle_type')
unique(rdacc_df$vehicle_type)
```

May need to bin certain data into smaller bits so as to draw conclusions

```{r}
rdacc_df <- as.data.frame(rdacc_sf)
colnames(rdacc_df)
```

Read the road data

```{r}
thai_rl_sf <- st_read(dsn = "data", layer = "hotosm_tha_roads_lines_shp") %>%
              st_set_crs(4326) %>%
              st_transform(crs = 32647)
thai_rl_sf
```

We are only interested in the Thai Metro Area, so need to read the boundaries from the boundary data and filter there

```{r}
# Read from the province layer, note that the Thai Metro area contains only
    # Bangkok
    # Nonthaburi
    # Nakhon Pathom
    # Pathum Thani
    # Samut Prakan
    # Samut Sakhon
thai_boundaries <- st_read(dsn = "data", layer = "tha_admbnda_adm1_rtsd_20220121") %>% st_transform(crs = 32647)

```

## Part 2 : Split by location

Since the regions only contains the said regions, we can split it down to the regions for better data processing speed. Said locations are

1)  Bangkok
2)  Nonthaburi
3)  Nakhon Pathom
4)  Pathum Thani
5)  Samut Prakan
6)  Samut Sakhon

```{r}
# Filter the thai boundaries by said locations
selected_location_list <- c('Bangkok', 'Nonthaburi', 'Nakhon Pathom', 'Pathum Thani', 'Samut Prakan', 'Samut Sakhon')
selected_thai_boundaries <- thai_boundaries[thai_boundaries$ADM1_EN %in% selected_location_list,]
plot(selected_thai_boundaries)
```
Make sure that the other locations are also confined to the selected locations

```{r}
combined_geometry <- st_union(selected_thai_boundaries)
print(combined_geometry)
plot(combined_geometry)
```


```{r}
# Filter by this combined geometry
contains_combined <- st_within(rdacc_sf, combined_geometry, sparse = FALSE)
contains_combined <- sapply(1:nrow(rdacc_sf), function(i) {
  any(contains_combined[[i]])
})
filtered_rdacc_sf <- rdacc_sf[contains_combined, ]
plot(filtered_rdacc_sf)
```
We can see that there is a cluster in the reporting datetime and the incident datetime.
But since the report and incident datetime is so similar there could be a relation.
There seems to be also a cluster in presumed cause in roughly the same area.

```{r}
# Now filter the roadlines as well
# Cut down thai_rl_sf to be smaller for easier processing remove unecesarry columns
# Smoothness infer from surface, source, width, oneway,layer

cut_rl_sf <- thai_rl_sf %>% select(-surface, -source, 
                                   -name, -name_en, -name_th,
                                   -width, -oneway, -layer,
                                   -osm_id, -osm_type)

# Drop Rows with special names that do not concern us,
# Only include Roads and link roads
cut_rl_sf <- cut_rl_sf %>% filter(highway %in% c("motorway", "trunk", "primary", "secondary", "tertiary", "unclassified", "residential", "service", "motorway_link", "trunk_link", "primary_link", "secondary_link", "motorway_junction"))

# Make new geometry, centerpoint of road so that comparison for st_within is easier later
# Dont have to compare all points in mutli-line, just see the center
cut_rl_sf$centroid <- st_centroid(cut_rl_sf$geometry)

plot(st_geometry(cut_rl_sf$centroid))
```



```{r}
# Filter for geometry
contains_rl <- st_within(cut_rl_sf$centroid, combined_geometry, sparse = FALSE, prepared=TRUE)
contains_rl <- sapply(1:nrow(cut_rl_sf), function(i) {
  any(contains_rl[[i]])
})
filtered_thai_rl_sf <- cut_rl_sf[contains_rl, ]
plot(filtered_thai_rl_sf$centroid)
```
## Part 3 : Saving the Smaller Files

The roadlines data is ver big, so saving to a smaller size file as a .rds file is advised

```{r}
write_rds(filtered_thai_rl_sf, file='data/clean_data/filtered_thai_rl_sf.rds')
write_rds(filtered_rdacc_sf, file='data/clean_data/filtered_rdacc_sf.rds')
write_rds(selected_thai_boundaries, file='data/clean_data/selected_thai_boundaries.rds')
```

## Part 4 : Read the new file

Now we can try to read the files again so that we can access the new data
This also gives us an estimate of how long it will take to process the data

```{r}
filtered_thai_rl_sf <- readRDS('data/clean_data/filtered_thai_rl_sf.rds')
filtered_rdacc_sf <- readRDS('data/clean_data/filtered_rdacc_sf.rds')

# Drop the centroid
filtered_thai_rl_sf <- filtered_thai_rl_sf %>% select(-centroid)

# Find All Roads that have no accidents nearby
distance_matrix <- st_distance(filtered_thai_rl_sf, filtered_rdacc_sf)
min_distances <- apply(distance_matrix, 1, min)

# If there are no accidents within 2km of the road, discard the road row
filtered_thai_rl_sf <- filtered_thai_rl_sf[min_distances <= 2, ]

plot(filtered_thai_rl_sf)
plot(filtered_rdacc_sf, add=TRUE, col='red')
```

## Part 4 : Plot all graphs together for visual prelimnary analysis'

The plots are too big, split up by district

```{r}
tm_shape(lixels)+
  tm_lines(col="density")+
```

```{r}
# There is still too much road data, remove all data where accidents dont occur nearby

```

## Part 5 : Kernel Analysis based off characteristics

Maybe can find kernels based off characteristics of the road. Typical 

```{r}

```

```{r}
# Filter the 2nd part too
# write_rds({SHAPE FILE}, "data/rds/{SHAPE_FILE}.rds")
```

```{r}
# To read the file
# SHAPE_NAME <- read_rds("data/rds/{SHAPE_FILE}.rds")
```

