---
title: "Take Home Exercise 1"
author: "Kieren Chua"
date: "August 26 2024"
date-modified: "last-modified"
execute: 
    eval: true # evaulate the code first
    echo: true # See the code output
    message: false # don't see the warnings
    freeze: true # Prevent re-render
---

# Take Home Exercise 1

## Part 1 : Reading the Data

```{r}
pacman::p_load("sf", "tidyverse", "tmap", "ggstatsplot", "spatstat", "spNetwork", "tmaptools")
```

Import the road accident data

```{r}
rdacc_sf <- read_csv("data/thai_road_accident_2019_2022.csv") %>% # Read the data
    mutate(Month = month(incident_datetime, label=TRUE)) %>% # Get month, set the date as factor by number
    mutate(dayofweek = day(incident_datetime)) %>% # Day of the week 
    mutate(Month_fac = month(incident_datetime, label = FALSE)) %>% # Sort by Factor setting label = FALSE
    filter(!is.na(longitude) & longitude != "", !is.na(latitude) & latitude != "") %>% # Filter for N.A. and empty values
    st_as_sf(coords = c("longitude", "latitude"), crs=4326) %>% # Convert to SF format
    st_transform(crs = 32647) # Convert to the correct format
# Use 32647 Format because the metro area is here
```

View the data, check for data loss **NO MORE THAN 25%**

```{r}
# Change to dataframe, check col names 
rdacc_df <- as.data.frame(rdacc_sf)
colnames(rdacc_df)
rdacc_sf
```

```{r}
# Inspect data

# Get descriptions on types of data types
print('presumed_cause')
unique(rdacc_df$presumed_cause)

print('number_of_fatalities')
unique(rdacc_df$number_of_fatalities)

print('weather_condition')
unique(rdacc_df$road_description)

print('weather_condition')
unique(rdacc_df$weather_condition)

print('vehicle_type')
unique(rdacc_df$vehicle_type)
```

May need to bin certain data into smaller bits so as to draw conclusions

```{r}
rdacc_df <- as.data.frame(rdacc_sf)
colnames(rdacc_df)
```

Read the road data

```{r}
thai_rl_sf <- st_read(dsn = "data", layer = "hotosm_tha_roads_lines_shp") %>%
              st_set_crs(4326) %>%
              st_transform(crs = 32647)
thai_rl_sf
```

We are only interested in the Thai Metro Area, so need to read the boundaries from the boundary data and filter there

```{r}
# Read from the province layer, note that the Thai Metro area contains only
    # Bangkok
    # Nonthaburi
    # Nakhon Pathom
    # Pathum Thani
    # Samut Prakan
    # Samut Sakhon
thai_boundaries <- st_read(dsn = "data", layer = "tha_admbnda_adm1_rtsd_20220121") %>% st_transform(crs = 32647)

```

## Part 2 : Split by location

Since the regions only contains the said regions, we can split it down to the regions for better data processing speed. Said locations are

1)  Bangkok
2)  Nonthaburi
3)  Nakhon Pathom
4)  Pathum Thani
5)  Samut Prakan
6)  Samut Sakhon

```{r}
# Filter the thai boundaries by said locations
selected_location_list <- c('Bangkok', 'Nonthaburi', 'Nakhon Pathom', 'Pathum Thani', 'Samut Prakan', 'Samut Sakhon')
selected_thai_boundaries <- thai_boundaries[thai_boundaries$ADM1_EN %in% selected_location_list,]
plot(selected_thai_boundaries)
```

Make sure that the other locations are also confined to the selected locations

```{r}
combined_geometry <- st_union(selected_thai_boundaries)
print(combined_geometry)
plot(combined_geometry)
```

```{r}
# Filter by this combined geometry
contains_combined <- st_within(rdacc_sf, combined_geometry, sparse = FALSE)
contains_combined <- sapply(1:nrow(rdacc_sf), function(i) {
  any(contains_combined[[i]])
})
filtered_rdacc_sf <- rdacc_sf[contains_combined, ]
plot(filtered_rdacc_sf)
```

We can see that there is a cluster in the reporting datetime and the incident datetime. But since the report and incident datetime is so similar there could be a relation. There seems to be also a cluster in presumed cause in roughly the same area.

```{r}
# Now filter the roadlines as well
# Cut down thai_rl_sf to be smaller for easier processing remove unecesarry columns
# Smoothness infer from surface, source, width, oneway,layer

cut_rl_sf <- thai_rl_sf %>% select(-surface, -source, 
                                   -name, -name_en, -name_th,
                                   -width, -oneway, -layer,
                                   -osm_id, -osm_type)

# Drop Rows with special names that do not concern us,
# Only include Roads and link roads
cut_rl_sf <- cut_rl_sf %>% filter(highway %in% c("motorway", "trunk", "primary", "secondary", "tertiary", "unclassified", "residential", "service", "motorway_link", "trunk_link", "primary_link", "secondary_link", "motorway_junction"))

# Make new geometry, centerpoint of road so that comparison for st_within is easier later
# Dont have to compare all points in mutli-line, just see the center
cut_rl_sf$centroid <- st_centroid(cut_rl_sf$geometry)

plot(st_geometry(cut_rl_sf$centroid))
```

```{r}
# Filter for geometry
contains_rl <- st_within(cut_rl_sf$centroid, combined_geometry, sparse = FALSE, prepared=TRUE)
contains_rl <- sapply(1:nrow(cut_rl_sf), function(i) {
  any(contains_rl[[i]])
})
filtered_thai_rl_sf <- cut_rl_sf[contains_rl, ]
```

## Part 3 : Saving the Smaller Files

The roadlines data is ver big, so saving to a smaller size file as a .rds file is advised

```{r}
write_rds(filtered_thai_rl_sf, file='data/clean_data/filtered_thai_rl_sf.rds')
write_rds(filtered_rdacc_sf, file='data/clean_data/filtered_rdacc_sf.rds')
write_rds(selected_thai_boundaries, file='data/clean_data/selected_thai_boundaries.rds')
```

## Part 4 : Read the new file

Now we can try to read the files again so that we can access the new data This also gives us an estimate of how long it will take to process the data

```{r}
filtered_thai_rl_sf <- readRDS('data/clean_data/filtered_thai_rl_sf.rds')
filtered_rdacc_sf <- readRDS('data/clean_data/filtered_rdacc_sf.rds')
filtered_thai_bd <- readRDS('data/clean_data/selected_thai_boundaries.rds')
```

## Part 4 : Plot all graphs together for visual prelimnary analysis'

Use tmaps, but split by area

```{r}
tm_shape(filtered_thai_rl_sf) +
  tm_lines(col = "highway") +
  tm_shape(filtered_rdacc_sf) +
  tm_dots(col = "presumed_cause", shape = "accident_type") +
  tm_layout(title = "Visual Preliminary Analysis")
```
Accidents seems to happen mostly on highways, with a few residential scattered, possible to remove some types of highways such as service.

Seems from the main view that accidents happend among main roads / highways. Can try lixelize to find column

```{r}
par(mfrow = c(1, 1))
```
## Part 5 : 1st and 2nd Order Analysis of Road Accidents

```{r}
# Confine geometry to OWIN 
filtered_thai_bd_owin <- as.owin(filtered_thai_bd)

plot(filtered_thai_bd)

# Turn points into PPP
filtered_rdacc_ppp <- as.ppp(filtered_rdacc_sf$geometry)
filtered_rdacc_ppp <- filtered_rdacc_ppp[filtered_thai_bd_owin]
filtered_rdacc_ppp.km <- rescale.ppp(filtered_rdacc_ppp, 1000, "km")

plot(filtered_rdacc_ppp)
```

### Check 1st Order and View

We can try to do first order spatial analysis to see if there are any clusters

#### Initial Overall View
```{r}
#| fig-width: 12
par(mfrow = c(1, 2))
# Use 1km as fixed bandwith
filtered_rdacc_bw <- density(filtered_rdacc_ppp.km,
                              sigma=1.0,
                              edge=TRUE,
                            kernel="gaussian")
plot(filtered_rdacc_bw)
plot(filtered_thai_bd$geometry)
par(mfrow = c(1, 1))
```
Seems like accidents are clustered to within certain stretches of highway and also near 
intersections.

We can also try to filter by day to determine if the working days affect

#### Split by District

Filter by district
1)  Bangkok
2)  Nonthaburi
3)  Nakhon Pathom
4)  Pathum Thani
5)  Samut Prakan
6)  Samut Sakhon
```{r}
#| fig-width: 12
bk <- filtered_rdacc_sf %>%
  filter(province_en == "Bangkok")
non <- filtered_rdacc_sf %>%
  filter(province_en == "Nonthaburi")
np <- filtered_rdacc_sf %>%
  filter(province_en == "Nakhon Pathom")
pt <- filtered_rdacc_sf %>%
  filter(province_en == "Pathum Thani")
sp <- filtered_rdacc_sf %>%
  filter(province_en == "Samut Prakan")
ss <- filtered_rdacc_sf %>%
  filter(province_en == "Samut Sakhon")

# Filter by Location
bk_owin <- filtered_thai_bd %>% filter(ADM1_EN=="Bangkok") %>% as.owin()
non_owin <- filtered_thai_bd %>% filter(ADM1_EN=="Nonthaburi") %>% as.owin()
np_owin <- filtered_thai_bd %>% filter(ADM1_EN=="Nakhon Pathom") %>% as.owin()
pt_owin <- filtered_thai_bd %>% filter(ADM1_EN=="Pathum Thani") %>% as.owin()
sp_owin <- filtered_thai_bd %>% filter(ADM1_EN=="Samut Prakan") %>% as.owin()
ss_owin <- filtered_thai_bd %>% filter(ADM1_EN=="Samut Sakhon") %>% as.owin()

# Plot the graphs
filtered_rdacc_ppp_bk <- filtered_rdacc_ppp[bk_owin]
filtered_rdacc_ppp_non <- filtered_rdacc_ppp[non_owin]
filtered_rdacc_ppp_np <- filtered_rdacc_ppp[np_owin]
filtered_rdacc_ppp_pt <- filtered_rdacc_ppp[pt_owin]
filtered_rdacc_ppp_sp <- filtered_rdacc_ppp[sp_owin]
filtered_rdacc_ppp_ss <- filtered_rdacc_ppp[ss_owin]

filtered_rdacc_ppp_bk.km <- rescale.ppp(filtered_rdacc_ppp_bk, 1000, "km")
filtered_rdacc_ppp_non.km <- rescale.ppp(filtered_rdacc_ppp_non, 1000, "km")
filtered_rdacc_ppp_np.km <- rescale.ppp(filtered_rdacc_ppp_np, 1000, "km")
filtered_rdacc_ppp_pt.km <- rescale.ppp(filtered_rdacc_ppp_pt, 1000, "km")
filtered_rdacc_ppp_sp.km <- rescale.ppp(filtered_rdacc_ppp_sp, 1000, "km")
filtered_rdacc_ppp_ss.km <- rescale.ppp(filtered_rdacc_ppp_ss, 1000, "km")

par(mfrow=c(3,2))
plot(filtered_rdacc_ppp_bk.km, main="Bangkok")
plot(filtered_rdacc_ppp_non.km , main="Nonthaburi")
plot(filtered_rdacc_ppp_np.km, main="Nakhon Pathom")
plot(filtered_rdacc_ppp_pt.km , main="Pathum Thani")
plot(filtered_rdacc_ppp_sp.km, main="Samut Prakan")
plot(filtered_rdacc_ppp_ss.km, main="Samut Sakhon")

par(mfrow=c(1, 1))
```


```{r}
#| fig-width: 12

par(mfrow=c(3,2))
plot(density(filtered_rdacc_ppp_bk.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Bangkok")
plot(density(filtered_rdacc_ppp_non.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Nonthaburi")
plot(density(filtered_rdacc_ppp_np.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Nakhon Pathom")
plot(density(filtered_rdacc_ppp_pt.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Pathum Thani")
plot(density(filtered_rdacc_ppp_sp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Samut Prakan")
plot(density(filtered_rdacc_ppp_ss.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Samut Sakhon")
par(mfrow=c(1, 1))
```

## Part 6 : Check Network constrained by Time

Now that we can see that there are clusters, we can put it in numbers by doing
lixelizing to gain new insight by time instead of road conditions as specified
in the task.

### Convert to LineString
```{r}
# Cast the multi-line to linestring
# filtered_thai_rl_sf$line_string <- st_cast(filtered_thai_rl_sf$geometry, "LINESTRING")
filtered_thai_rl_sf_linestring <- st_cast(filtered_thai_rl_sf, "LINESTRING")

```
### Additional Filtering

```{r}
# Drop the unecessary roads
filtered_thai_rl_sf_linestring <- filtered_thai_rl_sf_linestring %>% filter(highway != 'service') %>%      filter(highway != 'unclassified') %>% filter(highway != 'residential') 
filtered_thai_rl_sf_linestring

# Drop uncessary non-discernable types or those caused by natural disasters
filtered_rdacc_sf <- filtered_rdacc_sf %>% filter(weather_condition != "landslide") %>% filter(accident_type != "other") %>% filter(vehicle_type != "other")
```
### Time and size based additions
```{r}
unique(filtered_rdacc_sf$vehicle_type)
```

```{r}

# Add new column that describes the day of the week (Monday, Tuesday..)
filtered_rdacc_sf$dayofweek_name <- wday(filtered_rdacc_sf$incident_datetime, label=TRUE, abbr=FALSE)

# Add new column that describes time of day, split into morning(700am - 12pm), afternoon (12pm - 5pm), evening (5pm - 10pm), night (10pm - 5am)
classify_time_period <- function(dt) {
  hour <- hour(dt)
  
  if (hour >= 7 && hour < 12) {
    return("Morning")
  } else if (hour >= 12 && hour < 17) {
    return("Afternoon")
  } else if (hour >= 17 && hour < 22) {
    return("Evening")
  } else {
    return("Night")
  }
}

# I am seperating the vehicle based on size of blind spot
classify_vehicle <- function(dt) {
  small_vehicle <- c("motorcycle", "bicycle", "motorized tricycle")
  medium_vehicle <- c("passenger pickup truck", "private/passenger car", "large passenger vehicle", "4-wheel pickup truck")
  
  if (dt %in% small_vehicle) {
    return("Small")
  } else if (dt %in% medium_vehicle) {
    return("Medium")
  } else {
    return("Large")
  }
}

filtered_rdacc_sf <- filtered_rdacc_sf %>% mutate("time_of_day" = sapply(filtered_rdacc_sf$incident_datetime, classify_time_period))

# Classify vehicles into small, medium and large vehicles based on function above
filtered_rdacc_sf <- filtered_rdacc_sf %>% mutate("vehicle_class" = sapply(filtered_rdacc_sf$vehicle_type, classify_vehicle))
```

### Histogram Analysis

We can get a rough overview on the accidents by having a count
```{r}
# | fig-width: 100
ggplot(filtered_rdacc_sf, aes(x = time_of_day)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Histogram of accident by Time of Day", x = "Time of Day", y = "Count") +
  theme_minimal()
ggplot(filtered_rdacc_sf, aes(x = dayofweek_name)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Histogram of accident by Day of Week", x = "Day of Week", y = "Count") +
  theme_minimal()
ggplot(filtered_rdacc_sf, aes(x = vehicle_class)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Histogram of accident by vehicle_class", x = "vehicle_class", y = "Count") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Finding bandwidths using K-Function 

```{r}
# Make a table for accident types and by district to reduce size of the the network
#unique_locs <- unique(filtered_thai_bd$ADM1_EN)
unique_tod <- unique(filtered_rdacc_sf$time_of_day)
unique_dow <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

```

```{r}
set.seed(1234)
# Sample 1 graph to initialize an suitable starting bw
  
loc_rdacc_sf <- filtered_rdacc_sf %>% 
  filter(time_of_day == unique_tod[1]) %>%
  filter(dayofweek_name == unique_dow[1])


kfun_rdacc <- kfunctions(filtered_thai_rl_sf_linestring, 
                           loc_rdacc_sf,
                           start = 0, 
                           end = 1000, 
                           step = 50, 
                           width = 50, 
                           nsim = 50, 
                           resolution = 50,
                           verbose = TRUE, 
                            agg= 200,
                           conf_int = 0.05)

print(kfun_rdacc$plotk)

```


```{r}
# Initialize a dataframe to keep all the indexes
bw_dataframe <- data.frame(matrix(ncol = length(unique_tod), nrow = length(unique_dow)))
colnames(bw_dataframe) <- unique_tod
rownames(bw_dataframe) <- unique_dow

# Since I cannot append dataframes to dataframes, will need to save indexes
count <- 1
for (i in seq_along(unique_dow)) {
  for (j in seq_along(unique_tod)) {
    bw_dataframe[unique_dow[i], unique_tod[j]] <- count
    count <- count + 1
  }
}

bw_dataframe
```

### Lixelize based on bandwidths

```{r}
accidents_list <- vector("list", length(unique_dow) * length(unique_tod)) # 2 cols
lixels_list <- vector("list", length(unique_dow) * length(unique_tod))

appending_index <- 1
# Filter for acciednt types
for (i in seq_along(unique_dow)) {
  # Filter the day
  for (j in seq_along(unique_tod)) {
    loc_rdacc_sf <- filtered_rdacc_sf %>% 
      filter(time_of_day == unique_tod[j]) %>%
      filter(dayofweek_name == unique_dow[i])
    
    # Skip if no draw
    if (nrow(loc_rdacc_sf) <= 0) {
      next
    }
    
    lixelized <- lixelize_lines.mc(filtered_thai_rl_sf_linestring, 
                               1000, 
                               mindist = NULL)
    
    samples <- lines_center(lixelized)
    densities <- nkde(filtered_thai_rl_sf_linestring, 
                      events = loc_rdacc_sf,
                      w = rep(1, nrow(loc_rdacc_sf)),
                      samples = samples,
                      kernel_name = "quartic",
                      bw = 300, 
                      div= "bw", 
                      method = "simple",
                      digits = 3, 
                      tol = 1,
                      grid_shape = c(1,1), 
                      max_depth = 5,
                      agg = 5, 
                      sparse = TRUE,
                      verbose = FALSE)
    
    samples$density <- densities
    lixelized$density <- densities
    samples$density <- samples$density*1000
    lixelized$density <- lixelized$density*1000
    
    # Append the values to the dataframe
    print(appending_index)
    accidents_list[[appending_index]] <- loc_rdacc_sf
    lixels_list[[appending_index]] <- lixelized
    appending_index <- appending_index + 1
    
    
  }
}

```
###  Plot Graphs By Name

```{r}
# | fig-width: 12
# | fig-height: 20
# Print out the plots
tmap_mode("plot")
map_list <- list()

for (i in seq_along(unique_dow)) {
  for (j in seq_along(unique_tod)) {
    # Get the index
    cur_index <- bw_dataframe[unique_dow[i], unique_tod[j]]
    print(cur_index)
    set_title <- paste0(unique_dow[i], " on ", unique_tod[j])

    
    map <- tm_shape(lixels_list[[cur_index]])+
        tm_lines(col="highway", lwd="density", scale=4.0) +
      tm_shape(accidents_list[[cur_index]])+
        tm_dots(col="vehicle_class") +
        tm_layout(title = set_title)
    print(map)
  }
}
```

```{r}
# | fig-width: 30
# | fig-height: 20
tmap_arrange(map_list[1:4], nrows = 4)

```

```{r}
# | fig-width: 30
# | fig-height: 20
tmap_arrange(map_list[5:8], nrows = 4)
```

```{r}
# | fig-width: 30
# | fig-height: 20
tmap_arrange(map_list[9:12], nrows = 4)
```

```{r}
# | fig-width: 30
# | fig-height: 20
tmap_arrange(map_list[13:16], nrows = 4)
```

```{r}
# | fig-width: 30
# | fig-height: 20
tmap_arrange(map_list[17:20], nrows = 4)
```

```{r}
# | fig-width: 30
# | fig-height: 20
tmap_arrange(map_list[21:24], nrows = 4)
```

```{r}
# | fig-width: 30
# | fig-height: 20
tmap_arrange(map_list[25:28], nrows = 4)
```

## Part 7 : Final Analysis

Based on the histogram, we can see that more accidents happen during the night where it is possible. More accidents also happen during Friday and Saturday, Possibly due to it being the nights where people drive late and do not have to go to work tomorrow.

Most accidents are happening on motorways, according to the graphs. This is also backed up by the kernel analysis in 
part 4 where the regions of high density also correlate with the high network kernel density here. Most accidents happen at Kanchanaphisek Rd, roads connecting to Bang Khae Interchange, basically either motorways with long routes leading into Bangkok or Motorways with alot of exits to change into other highways. 

## Part 8 : Observations

It noted that more accidents happen with large vehicles in the afternoon and nights,while more accidents happen with medium sized vehicles during the morning and evening. This could correspond with rush hours where more people are going to or getting off from work during the morning and evening, where the number of personal vehicles on the road increases, therefore leading to more accidents during those periods

Another observation is that the majority of accidents are happening on motorways that are within the city area which are not linked via their train system. (I relied on Google Maps for this, I did not have time to find the appropriate data). If you do a side by side comparison, you can see that across all days and time periods excluding night, accidents do not occur commonly inside the populated zones and only happen on motorways that do not have any nearby adjacent train system. This result may be due to people taking the rail system more, therefore leading to less accidents. This hypothesis is further supported by observing the night time graphs, where accidents clusters begin to appear in the heavily populated regions when the train system is down for the night.

